

--------------------------------------
save.h저장시간 - 2021-09-04 오전 1:49:08 토요일
--------------------------------------

#pragma once

#include <string>

using namespace std;

//선언
void save(string);


--------------------------------------
save.cpp저장시간 - 2021-09-04 오전 1:49:08 토요일
--------------------------------------

//------------------------------------------------------------------------------------------
// 전달된 파일이름에 있는 글자를 읽어 "2021 2 C++ 강의저장.txt"에 저장한다.
//
// 2021. 2학기 C++                                                              2021. 8. 31
//------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <string>
#include <fstream>
#include <chrono>
#include <iomanip>

using namespace std;

//-------------------------- 
void save(string fileName)
//--------------------------
{
	ifstream in{ fileName };

	char ch;
	in >> noskipws;

	ofstream out{ "2021 2 C++ 강의저장.txt", ios::app };

	time_t t = chrono::system_clock::to_time_t(chrono::system_clock::now());
	out.imbue(locale(("korean")));

	out << endl << endl;
	out << "--------------------------------------" << endl;
	out << fileName << "저장시간 - " << put_time(localtime(&t), "%c %A") << endl;
	out << "--------------------------------------" << endl;
	out << endl;

	// ctrl + o

	while (in >> ch) {

		out << ch;
	}
	out << endl;
}


--------------------------------------
소스.cpp저장시간 - 2021-09-04 오전 1:49:08 토요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++																	    1주 2일 
  
  
  소스 파일을 파일로 저장하자. 이 코드는 앞으로 배울것이니 몰라도 된다.
  저장한 시간을 파일에 기록하자.
  저장하는 코드 부분을 save.cpp에 저장한다.
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"

using namespace std;

// [문제] 분리된 파일이 잘 실행되도록 하라.

int main()
{
	save("save.h");
	save("save.cpp");
	save("소스.cpp");
}


--------------------------------------
소스.cpp저장시간 - 2021-09-05 오후 6:39:12 일요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++																	    1주 2일 
  
  
  공부할 내용 - C++ 입출력
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"

using namespace std;

// [문제] 구구단을 출력하는 프로그램을 작성하라.
// 몇 단을 출력할 것인지 입력받고 그 단을 화면에 출력하면 된다.


//---------
int main()
//---------
{
	cout << "구구단을 출력합니다." << endl;

	cout << "몇 단을 출력할까요? ";
	int dan{};						// int를 기본값(0)으로 초기화
	cin >> dan;

	cout << dan << " x 1 = " << dan * 1 << endl;
	cout << dan << " x 2 = " << dan * 2 << endl;
	cout << dan << " x 3 = " << dan * 3 << endl;
	cout << dan << " x 4 = " << dan * 4 << endl;
	cout << dan << " x 5 = " << dan * 5 << endl;
	cout << dan << " x 6 = " << dan * 6 << endl;
	cout << dan << " x 7 = " << dan * 7 << endl;
	cout << dan << " x 8 = " << dan * 8 << endl;
	cout << dan << " x 9 = " << dan * 9 << endl;

	save("소스.cpp");
}


--------------------------------------
소스.cpp저장시간 - 2021-09-05 오후 6:42:09 일요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++																	    1주 2일 
  
  
  공부할 내용 - C++ 입출력
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"

using namespace std;

// [문제] 구구단을 출력하는 프로그램을 작성하라.
// 몇 단을 출력할 것인지 입력받고 그 단을 화면에 출력하면 된다.


//---------
int main()
//---------
{
	cout << "-----------------" << endl;
	cout << "구구단을 출력합니다." << endl;
	cout << "-----------------" << endl;
	cout << endl;

	cout << "몇 단을 출력할까요? ";
	int dan{};						// int를 기본값(0)으로 초기화
	cin >> dan;

	for (int i = 0; i < 10; i++)
	{
		cout << dan << "x" << i << "=" << dan * i << endl;
	}

	save("소스.cpp");
}


--------------------------------------
소스.cpp저장시간 - 2021-09-05 오후 6:42:57 일요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++																	    1주 2일 
  
  
  공부할 내용 - C++ 입출력
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"

using namespace std;

// [문제] 구구단을 출력하는 프로그램을 작성하라.
// 몇 단을 출력할 것인지 입력받고 그 단을 화면에 출력하면 된다.


//---------
int main()
//---------
{
	cout << "-----------------" << endl;
	cout << "구구단을 출력합니다." << endl;
	cout << "-----------------" << endl;
	cout << endl;

	cout << "몇 단을 출력할까요? ";
	int dan{};						// int를 기본값(0)으로 초기화
	cin >> dan;

	for (int i = 1; i < 10; ++i){
		cout << dan << "x" << i << "=" << dan * i << endl;
	}

	save("소스.cpp");
}



--------------------------------------
소스.cpp저장시간 - 2021-09-05 오후 6:59:55 일요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++																	    1주 2일 
  
  
  공부할 내용 - 자료형과 변수
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"

using namespace std;

// [문제] C++ 언어에서 미리 정의한 자료형 int의 메모리 크기를 알아보자.



//---------
int main()
//---------
{
	cout << "int의 메모리 크기는 -" << sizeof(int) << endl;

	save("소스.cpp");
}


--------------------------------------
소스.cpp저장시간 - 2021-09-05 오후 7:27:03 일요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++																	    1주 2일 
  
  
  공부할 내용 - 자료형과 변수
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"

using namespace std;

// [문제] C++ 언어에서 미리 정의한 자료형 int의 메모리 크기를 알아보자.



//---------
int main()
//---------
{
	int n{ 0x7fffffff};

	cout << "int의 메모리 크기는 -" << sizeof(n) << "바이트 입니다." << endl;

	cout << "가장 큰 값 - " << n << endl;
	cout << "가장 작은 값 - " << n + 1 << endl;

	save("소스.cpp");
}


--------------------------------------
소스.cpp저장시간 - 2021-09-05 오후 7:30:37 일요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++																	    1주 2일 
  
  
  공부할 내용 - 자료형과 변수
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"

using namespace std;

// [문제] int의 최대값과 최솟값을 출력하라.


//---------
int main()
//---------
{
	cout << "int의 최대값" << numeric_limits<int>::max() << endl;
	cout << "int의 최소값" << numeric_limits<int>::min() << endl;

	save("소스.cpp");
}


--------------------------------------
소스.cpp저장시간 - 2021-09-12 오전 1:06:03 일요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++																	    2주 1일 
  
  
  공부할 내용 - 자료형과 변수
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

// [문제] int의 최대값과 최솟값을 출력하라.


//---------
int main()
//---------
{
	// // 값을 초기화 할 수 있다.
	// initialization - 메모리를 할당하면서 값을 쓰는 특별한 동작
	// C++에서 초기화는 여러가지 방법으로 할 수 있는데
	// 앞으로는 uniform initialization을 사용하자.

	int num = 0; 
	
	cout << num << endl;
	

	save("소스.cpp"); 
}


--------------------------------------
소스.cpp저장시간 - 2021-09-12 오전 1:12:29 일요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++																	    2주 1일 
  
  
  공부할 내용 - 자료형과 변수
	- uniform 초기화
	- 지역변수와 전역변수
	- int[]와 같은 자료형은 반드시(100%) 연속된 메모리를 확보한다.
	- 지역변수는 사는 곳이 유사하다.
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

int num;   // 전역 변수는 항상 0으로 초기화 됨을 보장한다. // { } 으로 초기화되기 떄문 - defualt 초기화 

//---------
int main()
//---------
{
	cout << num << endl;
	
	save("소스.cpp"); 
}



--------------------------------------
소스.cpp저장시간 - 2021-09-12 오후 11:58:45 일요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++																	    2주 1일 
  
  
  공부할 내용 - 자료형과 변수
	- uniform 초기화
	- 지역변수와 전역변수
	- int[]와 같은 자료형은 반드시(100%) 연속된 메모리를 확보한다.
	- 지역변수는 사는 곳이 유사하다.
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;


//---------
int main()
//---------
{
	int num[] = {1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5};

	for (int i = 0; i < size(num); i++){
		cout << num[i] << " " << endl;
	}

	// [문제] num에 저장된 정수 10개를 출력하라.
	 
	save("소스.cpp"); 
}



--------------------------------------
소스.cpp저장시간 - 2021-09-13 오전 12:03:20 월요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++																	    2주 1일 
  
  
  공부할 내용 - 자료형과 변수
	- uniform 초기화
	- 지역변수와 전역변수
	- int[]와 같은 자료형은 반드시(100%) 연속된 메모리를 확보한다.
	- 지역변수는 사는 곳이 유사하다.
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;


//---------
int main()
//---------
{
	int num[] = {1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5};

	for (int n : num){
		cout << n << " ";
	}

	// [문제] num에 저장된 값을 모두 출력하라.
	// range-for를 이용하여 출력한다.
	 
	save("소스.cpp"); 
}


--------------------------------------
소스.cpp저장시간 - 2021-09-13 오전 12:19:00 월요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++																	    2주 1일 
  
  
  공부할 내용 - 자료형과 변수
	- uniform 초기화
	- 지역변수와 전역변수
	- int[]와 같은 자료형은 반드시(100%) 연속된 메모리를 확보한다.
	- 지역변수는 사는 곳이 유사하다.
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <string>
#include "save.h"
using namespace std;


//---------
int main() 
//---------
{
	char c{ 'A' };
	short s{ 123 };
	int num{ 123456789 };
	double d{ 3.14159265358979 };
	string str{ "C++은 너무 재미있어!" };

	cout << c << endl;
	cout << d << endl;

	cout << "string 자료형이 차지하는 메모리 - " << sizeof(str) << endl;

	 
	save("소스.cpp"); 
}


--------------------------------------
소스.cpp저장시간 - 2021-09-13 오전 1:40:25 월요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++																	    2주 1일 
  
  
  공부할 내용 - 자료형과 변수
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <string>
#include "save.h"
using namespace std;

// [문재] 각 변수의 내용과 메모리 주소를 출력하라. (5분)
//---------
int main() 
//---------
{
	char c{ 'A' };
	int num{ 123456789 };
	string str{ "C++은 너무 재미있어!" };

	cout << "char의 값 -" << c << "주소 -" << &c << endl;
	cout << "int의 값 -" << num << "주소 -" << &num << endl;
	cout << "string의 값 -" << str << "주소 -" << &str << endl;

	save("소스.cpp"); 
}


--------------------------------------
소스.cpp저장시간 - 2021-09-13 오전 1:48:19 월요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++																	    2주 1일 
  
  
  공부할 내용 - 자료형과 변수
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <string>
#include "save.h"
using namespace std;

// [문재] 각 변수의 내용과 메모리 주소를 출력하라. (5분)
// [문제] num의 모든 원소의 값과 주소를 출력하라. (5분) .......... int num[] {11, 22, 33, 44, 55}
//---------
int main() 
//---------
{
	{
		int num[]{ 11, 22, 33, 44, 55 }; 

		for (int i = 0; i < size(num); ++i)
		{
			cout << "값 - " << num[i] << ", 주소 - " << &num[i] << endl;
		}
	}

	save("소스.cpp"); 
}


--------------------------------------
소스.cpp저장시간 - 2021-09-13 오전 1:52:08 월요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++																	    2주 1일 
  
  
  지역변수가 사는 곳 - STACK (메모리 공간, 자료구조에서 배우는 STACK과 다름)
  전역변수가 사는 곳 - DATA
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <string>
#include "save.h"
using namespace std;

// [문제] 전역변수와 지역변수가 만들어진 공간이 다름을 확인하라.

int g;


//---------
int main() 
//---------
{

	// 전역변수 g의 주소를 적어본다.
	cout << "전역변수 g의 값 - " << g << ", 주소 - " << &g << endl;

	{
		int num[]{ 11, 22, 33, 44, 55 }; 

		for (int i = 0; i < size(num); ++i)
		{
			cout << "값 - " << num[i] << ", 주소 - " << &num[i] << endl;
		}
	}

	save("소스.cpp"); 
}


--------------------------------------
소스.cpp저장시간 - 2021-09-13 오전 2:06:02 월요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++																	    2주 1일 
  
  

  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <string>
#include "save.h"
using namespace std;



//---------
int main() 
//---------
{
	int a{ 1 };
	int b{ 2 };

	// [문제] 여기에서 뭔가를 하여 다음 문장을 실행하면 2, 1 과 같이 출력되도록 하라.
	int temp{ a };
	a = b;
	b = temp;

	cout << a << ", " << b << endl;

	save("소스.cpp"); 
}


--------------------------------------
소스.cpp저장시간 - 2021-09-13 오전 2:17:31 월요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++																	    2주 1일 
  
  

  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <string>
#include "save.h"
using namespace std;



//---------
int main() 
//---------
{
	int num[]{ 3, 1, 9, 5, 7 };

	// [문제] num에 저장된 int 값 중에서 제일 큰 수를 마지막 위치로 옮겨라 (10분)
	// int num[] {1, 3, 5, 7, 9}

	for (int i = 0; i < size(num) - 1; ++i)
	{
		if (num[i] > num[i + 1])
		{
			int tmp{ num[i] };
			num[i] = num[i + 1];
			num[i + 1] = tmp;
		}
	}

	for (int n : num)
	{
		cout << n << " ";
	}

	save("소스.cpp"); 
}


--------------------------------------
소스.cpp저장시간 - 2021-09-13 오전 2:29:58 월요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++																	    2주 1일 
  
  

  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <string>
#include "save.h"
using namespace std;



//---------
int main() 
//---------
{
	int num[]{12, 43, 333, 12, 333, 33333, 124235, 6, -120, -111};

	// [문제] num에 저장된 int 값을 오름차순(ascending order)으로 정렬(sort)하시오.

	// (실습) 이런 코딩을 안해본 사람은 손으로 정렬 과정을 써 본 후 코딩하라.

	// bubble sort - 가장 비효율적인 코드이다.

	for (int j = 0; j < size(num) - 1; ++j) {
		for (int i = 0; i < size(num) - 1 - j; ++i)
		{
			if (num[i] > num[i + 1])
			{
				int tmp{ num[i] };
				num[i] = num[i + 1];
				num[i + 1] = tmp;
			}
		}
	}

		for (int n : num)
		{
			cout << n << " ";
		}
	 
	save("소스.cpp"); 
}




--------------------------------------
소스.cpp저장시간 - 2021-09-18 오후 11:51:40 토요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++																	    2주 1일 
  
  
  int를 정렬해 본다. - bubble sort
  int 값을 random 하게 생성 하는 방법
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <string>
#include <random>
#include "save.h"
using namespace std;



//---------
int main() 
//---------
{
	// C++에서 랜덤값 생성
	// - 랜덤엔진과 분포를 사용한다.
	
	default_random_engine dre;
	uniform_int_distribution<> uid;

	for (int i = 0; i < 100; ++i) {
		cout << uid(dre) << "\t";
		cout << endl;
	}
	
	 
	save("소스.cpp");  
}

/*for (int j = 0; j < size(num) - 1; ++j) {
		for (int i = 0; i < size(num) - 1 - j; ++i)
		{
			if (num[i] > num[i + 1])
			{
				int tmp{ num[i] };
				num[i] = num[i + 1];
				num[i + 1] = tmp;
			}
		}
	}*/


--------------------------------------
소스.cpp저장시간 - 2021-09-18 오후 11:53:46 토요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++																	    2주 1일 
  
  
  int를 정렬해 본다. - bubble sort
  int 값을 random 하게 생성 하는 방법
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <string>
#include <random>
#include "save.h"
using namespace std;



//---------
int main() 
//---------
{
	// [문제] 주사위 값을 출력하라.

	
	default_random_engine dre;
	uniform_int_distribution<> uid;

	for (int i = 0; i < 10; ++i) {
		cout << uid(dre) % 6 + 1;
	}
	 
	save("소스.cpp");  
}

/*for (int j = 0; j < size(num) - 1; ++j) {
		for (int i = 0; i < size(num) - 1 - j; ++i)
		{
			if (num[i] > num[i + 1])
			{
				int tmp{ num[i] };
				num[i] = num[i + 1];
				num[i + 1] = tmp;
			}
		}
	}*/


--------------------------------------
소스.cpp저장시간 - 2021-09-18 오후 11:55:09 토요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++																	    2주 1일 
  
  
  int를 정렬해 본다. - bubble sort
  int 값을 random 하게 생성 하는 방법
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <string>
#include <random>
#include "save.h"
using namespace std;



//---------
int main() 
//---------
{
	// [문제] 주사위 값을 출력하라.

	
	default_random_engine dre;
	uniform_int_distribution<> uid{ 1, 6 };

	for (int i = 0; i < 10; ++i) {
		cout << uid(dre);
	}
	 
	save("소스.cpp");  
}

/*for (int j = 0; j < size(num) - 1; ++j) {
		for (int i = 0; i < size(num) - 1 - j; ++i)
		{
			if (num[i] > num[i + 1])
			{
				int tmp{ num[i] };
				num[i] = num[i + 1];
				num[i + 1] = tmp;
			}
		}
	}*/


--------------------------------------
소스.cpp저장시간 - 2021-09-19 오전 12:33:28 일요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++																	    2주 1일 
  
  
  int를 정렬해 본다. - bubble sort
  int 값을 random 하게 생성 하는 방법
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <string>
#include <random>
#include <thread>
#include "save.h"
using namespace std;

// [문제] (1, 1000] 임의의 값을 갖는 정수 1'000개를 생성하라.
// 생성한 정수의 값을 화면에 출력하라.
// 정수를 오름차순으로 정렬하라.
// 정렬한 정수를 화면에 출력하라.               (20분)

//---------
int main() 
//---------
{
	int values[1'000];

	default_random_engine dre;
	uniform_int_distribution<> uid{ 1, 1000 };

	for (int i = 0; i < size(values); ++i) {
		values[i] = uid(dre);
	}
	
	// 정렬한다.

	for (int j = 0; j < size(values) - 1; ++j) {
		for (int i = 0; i < size(values) - 1 - j; ++i)
		{
			if (values[i] > values[i + 1])
			{
				int tmp{ values[i] };
				values[i] = values[i + 1];
				values[i + 1] = tmp;
			}
		}
	}

	for (int num : values) {
		cout << num << " ";
		cout << endl;
	}
	

	save("소스.cpp");  
}




--------------------------------------
소스.cpp저장시간 - 2021-09-21 오후 5:35:26 화요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        3주 1일 - 1교시
  
  실습하며 복습 - 자료형, 변수, 파일에 읽고 쓰기, 정렬, 랜덤값 생성

  C++은 자료를 어떻게 정렬하는가
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <string>
#include <random>
#include <thread>
#include "save.h"
using namespace std;

// [문제] 주사위를 1'0000번 던져 나온 숫자를 저장하라.
// 각 수자의 출현 확률을 계산하여 화면에 출력하라.

//---------
int main() 
//---------
{
	char dice_num[1'0000];

	default_random_engine dre;
	uniform_int_distribution<> uid{ 1, 6 };

	for (int i = 0; i < size(dice_num); ++i)
	{
		dice_num[i] = uid(dre);
	}

	for (char n : dice_num)
	{
		cout << static_cast<int>(n) << " ";
		cout << endl;
	}

	save("소스.cpp");  
}




--------------------------------------
소스.cpp저장시간 - 2021-09-22 오전 1:06:03 수요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        3주 1일 - 1교시
  
  실습하며 복습 - 자료형, 변수, 파일에 읽고 쓰기, 정렬, 랜덤값 생성

  C++은 자료를 어떻게 정렬하는가
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <string>
#include <random>
#include <thread>
#include "save.h"
using namespace std;

// [문제] 주사위를 1'0000번 던져 나온 숫자를 저장하라.
// 각 수자의 출현 확률을 계산하여 화면에 출력하라.

//---------
int main() 
//---------
{
	char dice_num[1'0000];

	default_random_engine dre;
	uniform_int_distribution<> uid{ 1, 6 };

	for (int i = 0; i < size(dice_num); ++i)
	{
		dice_num[i] = uid(dre);
	}
	
	int cnt[6]{};

	// 각 숫자의 확률을 계산한다.
	for (int n : dice_num) {
		if (n == 1) {
			cnt[0]++;
		}
		else if (n == 2) {
			cnt[1]++;
		}
		else if (n == 3) {
			cnt[2]++;
		}
		else if (n == 4) {
			cnt[3]++;
		}

		else if (n == 5) {
			cnt[4]++;
		}
		else if (n == 6) {
			cnt[5]++;
		}
	}

	for (int i = 0; i < 6; ++i) {
		cout << i + 1 << "의 갯수 - " << cnt[i] << endl;
	}

	save("소스.cpp");  
}




--------------------------------------
소스.cpp저장시간 - 2021-09-22 오전 1:08:24 수요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        3주 1일 - 1교시
  
  실습하며 복습 - 자료형, 변수, 파일에 읽고 쓰기, 정렬, 랜덤값 생성

  C++은 자료를 어떻게 정렬하는가
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <string>
#include <random>
#include <thread>
#include "save.h"
using namespace std;

// [문제] 주사위를 1'0000번 던져 나온 숫자를 저장하라.
// 각 수자의 출현 확률을 계산하여 화면에 출력하라.

//---------
int main() 
//---------
{
	char dice_num[1'0000];

	default_random_engine dre;
	uniform_int_distribution<> uid{ 1, 6 };

	for (int i = 0; i < size(dice_num); ++i)
	{
		dice_num[i] = uid(dre);
	}
	
	int cnt[6]{};

	// 각 숫자의 확률을 계산한다.
	for (int n : dice_num) {
		cnt[n - 1]++;
	}

	for (int i = 0; i < 6; ++i) {
		cout << i + 1 << "의 갯수 - " << static_cast<double>(cnt[i])/size(dice_num) << endl;
	}

	save("소스.cpp");  
}




--------------------------------------
소스.cpp저장시간 - 2021-09-22 오전 2:10:24 수요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        3주 1일 - 2교시
  
  실습하며 복습 - 자료형, 변수, 파일에 읽고 쓰기, 정렬, 랜덤값 생성

  지역변수의 크기 한계 - default 1MB
  C++은 자료를 어떻게 정렬하는가
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <string>
#include <random>
#include <thread>
#include "save.h"
#include <fstream>
using namespace std;

// [문제] 파일 "점수.txt"에는 학생 100명의 C++ 점수가 저장되어 있다.
// 평균점수를 계산하여 화면에 출력하라.

void makeData();		// 선언

//---------
int main() 
//---------
{
	makeData();		// 점수를 파일에 기록한다.

	save("소스.cpp");  
}


void makeData()		// 정의 
{
	ofstream out{ "점수.txt" };


	default_random_engine dre;
	uniform_int_distribution<> uid{0, 100};

	for (int i = 0; i < 100; ++i)
		out << uid(dre) << "   ";
	out << endl;
}


--------------------------------------
소스.cpp저장시간 - 2021-09-22 오전 2:27:55 수요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        3주 1일 - 2교시
  
  실습하며 복습 - 자료형, 변수, 파일에 읽고 쓰기, 정렬, 랜덤값 생성

  지역변수의 크기 한계 - default 1MB
  C++은 자료를 어떻게 정렬하는가
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <string>
#include <random>
#include <thread>
#include "save.h"
#include <fstream>
using namespace std;

// [문제] 파일 "점수.txt"에는 학생 100명의 C++ 점수가 저장되어 있다.
// 평균점수를 계산하여 화면에 출력하라.

//---------
int main() 
//---------
{
	ifstream in{ "점수.txt" };

	int sum{};

	for (int i = 0; i < 100; ++i) {
		int num;
		in >> num;
		sum += num;
	}

	cout << "평균값 - " << sum / 100.0 << endl;

	save("소스.cpp");  
}



--------------------------------------
소스.cpp저장시간 - 2021-09-22 오후 3:56:21 수요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        3주 2일 - 1교시
  
  실습하며 복습 - 자료형, 변수, 파일에 읽고 쓰기, 정렬, 랜덤값 생성

  
  C++은 자료를 어떻게 정렬하는가

  - 두 값을 교환할 수 있는 함수를 작성하라 - 포인터로 해결
  - 포인터를 사용하는 이유?
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <string>
#include <random>
#include <thread>
#include "save.h"
#include <fstream>
using namespace std;

// [문제] 2, 1이 출력되도록 함수를 만들어 호출하라. (10분)

void swap(int* , int*);

//---------
int main() 
//---------
{
	int a{ 1 }, b{ 2 };

	// 여기에서 내가 만든 함수를 호출하였다.
	
	swap(&a, &b);
	
	cout << a << ", " << b << endl;

	save("소스.cpp");  
}

void swap(int* x, int* y)
{
	int temp{ *x };
	*x = *y;
	*y = temp;
}


--------------------------------------
소스.cpp저장시간 - 2021-09-22 오후 4:56:22 수요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        3주 2일 - 1교시
  
  실습하며 복습 - 자료형, 변수, 파일에 읽고 쓰기, 정렬, 랜덤값 생성

  
  C++은 자료를 어떻게 정렬하는가

  - 두 값을 교환할 수 있는 함수를 작성하라 - 포인터로 해결
  - 포인터를 사용하는 이유?
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <string>
#include <random>
#include <thread>
#include "save.h"
#include <fstream>
using namespace std;


//---------
int main() 
//---------
{
	// C / C++ 언어에서 포인터 설명

	int num{ 10 };

	cout << num << endl;

	int* p = &num;
	*p = 123;

	cout << num <<endl;

	save("소스.cpp");  
}




--------------------------------------
소스.cpp저장시간 - 2021-09-22 오후 5:09:45 수요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        3주 2일 - 1교시
  
  실습하며 복습 - 자료형, 변수, 파일에 읽고 쓰기, 정렬, 랜덤값 생성

  
  C++은 자료를 어떻게 정렬하는가

  - 두 값을 교환할 수 있는 함수를 작성하라 - 포인터로 해결
  - 포인터를 사용하는 이유?
	- 한 지역에서 다른 지역의 데이터를 원격조작하기 위해 사용한다.
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <string>
#include <random>
#include <thread>
#include "save.h"
#include <fstream>
using namespace std;

// C++에서 두값을 교환하느 방법 - reference(참조)를 사용하여 해결한다.

void change(int*, int*);

//---------
int main() 
//---------
{
	int a{ 10 }, b{ 20 };

	change(&a, &b);

	cout << a << ", " << b << endl;
	

	save("소스.cpp");  
}

void change(int* p, int* q)
{
	int temp{ *p };

	*p = *q;
	*q = temp;
}


--------------------------------------
소스.cpp저장시간 - 2021-09-22 오후 5:22:27 수요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        3주 2일 - 1교시
  
  실습하며 복습 - 자료형, 변수, 파일에 읽고 쓰기, 정렬, 랜덤값 생성

  
  C++은 자료를 어떻게 정렬하는가

  - 두 값을 교환할 수 있는 함수를 작성하라 - 포인터로 해결
  - 포인터를 사용하는 이유?
	- 한 지역에서 다른 지역의 데이터를 원격조작하기 위해 사용한다.
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <string>
#include <random>
#include <thread>
#include "save.h"
#include <fstream>
using namespace std;

// C++에서 두값을 교환하느 방법 - reference(참조)를 사용하여 해결한다.

void change(int&, int&);

//---------
int main() 
//---------
{
	int a{ 10 }, b{ 20 };

	change(a, b);

	cout << a << ", " << b << endl;
	
	
	save("소스.cpp");  
}

void change(int& p, int& q)
{
	int temp{ p };

	p = q;
	q = temp;
}


--------------------------------------
소스.cpp저장시간 - 2021-09-22 오후 9:49:25 수요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        3주 2일 - 1교시
  
  실습하며 복습 - 자료형, 변수, 파일에 읽고 쓰기, 정렬, 랜덤값 생성

  
  C++은 자료를 어떻게 정렬하는가

  *, & - 원격조작에 사용
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <string>
#include <random>
#include <thread>
#include "save.h"
#include <fstream>
using namespace std;

// [문제] a를 오름차순으로 정렬하시오.

int f(const void*, const void*);

//---------
int main() 
//---------
{	
	int a[]{ 1, 3, 5, 7, 9, 2, 4, 6, 8, 10 };

	// 오름차순으로 정렬하라.
	// qsort 함수는 메모리를 이해하는데 매우 좋은 함수이다. 시간내서 알아두자.
	// qsort 함수는 어떤 자료든 정렬하는 만능함수이다.

	qsort(a, size(a), sizeof(int), f);
	

	for (int n : a)
		cout << n << " ";
	cout << endl;
	
	save("소스.cpp");  
}

int f(const void* a, const void* b)
{
	int* p = (int*)a;
	int* q = (int*)b;

	if (*p > *q)
		return 1;
	else if (*p < *q)
		return -1;
	return 0;
}



--------------------------------------
소스.cpp저장시간 - 2021-09-23 오전 12:58:20 목요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        3주 2일 - 1교시
  
  실습하며 복습 - 자료형, 변수, 파일에 읽고 쓰기, 정렬, 랜덤값 생성

  
  C++은 자료를 어떻게 정렬하는가

  *, & - 원격조작에 사용
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <string>
#include <random>
#include <thread>
#include "save.h"
#include <fstream>
using namespace std;

int f(const void*, const void*);

//---------
int main() 
//---------
{	
	char a[]{ 'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e'};

	// 내림차순으로 정렬하라.
	
	qsort(a, size(a), sizeof(char), f);
	

	for (char c : a)
		cout << c << " ";
	cout << endl;
	
	save("소스.cpp");  
}

int f(const void* a, const void* b)
{
	char* p = (char*)a;
	char* q = (char*)b;

	if (*p > *q)
		return -1;
	else if (*p < *q)
		return 1;
	return 0;
}



--------------------------------------
소스.cpp저장시간 - 2021-10-03 오후 2:25:27 일요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        4주 1일 - 1교시
  
  실습하며 복습 - 자료형, 변수, 파일에 읽고 쓰기, 정렬, 랜덤값 생성

  
  C++은 자료를 어떻게 정렬하는가 - sort 함수로 정렬하면 된다.
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <string>
#include <random>
#include <thread>
#include "save.h"
#include <fstream>
using namespace std;

int fn(const void*, const void*);

//---------
int main() 
//---------
{	
	string str[]{"코로나", "4단계", "추석", "강의동영상", "C++", "정렬"};

	cout << sizeof(string) * size(str) << endl;

	qsort(str, 6, 32, fn);

	cout << endl << endl;
	cout << "정렬한 결과" << endl;
	for (string s : str)
		cout << s << endl;

	save("소스.cpp");  
}

int fn(const void* a, const void* b)
{
	string s1 = *(string*)(a);
	string s2 = *(string*)(b);

	cout << s1 << " --- " << s2 << endl;

	if (s1 > s2)
		return 1;
	else if (s1 < s2)
		return -1;

	
}

 


--------------------------------------
소스.cpp저장시간 - 2021-10-03 오후 2:41:30 일요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        4주 1일 - 1교시
  
  실습하며 복습 - 자료형, 변수, 파일에 읽고 쓰기, 정렬, 랜덤값 생성

  
  C++은 자료를 어떻게 정렬하는가 - sort 함수로 정렬하면 된다.
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <string>
#include <random>
#include <thread>
#include "save.h"
#include <fstream>
using namespace std;

int fn(const void*, const void*);

//---------
int main() 
//---------
{	
	string str[]{"코로나", "4단계", "추석", "강의동영상", "C++", "정렬"};

	cout << sizeof(string) * size(str) << endl;

	qsort(str, 6, 32, fn);

	cout << endl << endl;
	cout << "정렬한 결과" << endl;
	for (string s : str)
		cout << s << endl;

	save("소스.cpp");  
}

int fn(const void* a, const void* b)
{
	string s1 = *(string*)(a);
	string s2 = *(string*)(b);

	cout << s1 << " --- " << s2 << endl;

	if (s1 < s2)
		return 1;
	else if (s1 > s2)
		return -1;

	
}

 




 


--------------------------------------
소스.cpp저장시간 - 2021-10-03 오후 4:17:43 일요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        4주 1일 - 1교시
  
  실습하며 복습 - 자료형, 변수, 파일에 읽고 쓰기, 정렬, 랜덤값 생성

  
  C++은 자료를 어떻게 정렬하는가 - sort 함수로 정렬하면 된다.

  const의 의미 - 메모리를 읽을 수는 있지만 쓸 수는 없다.
  void* - 메모리에 있는 원소의 자료형이 무엇인지 모를 때 사용
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <string>
#include <random>
#include <thread>
#include "save.h"
#include <fstream>
using namespace std;

int fn(const void*, const void*);

//---------
int main() 
//---------
{
	string str[]{"코로나", "4단계", "추석", "강의동영상", "C++", "정렬"};

	//글자 길이를 오름차순으로 정렬하라.
	qsort(str, 6, 32, fn);

	cout << endl << endl;
	cout << " --- 정렬한 결과 --- " << endl;
	for (string s : str)
		cout << s << endl;

	save("소스.cpp");  
}

int fn(const void* a, const void* b)
{
	string s1 = *(string*)(a);
	string s2 = *(string*)(b);

	if (s1.size() > s2.size())
		return 1;
	else if (s1.size() < s2.size())
		return -1;

}

 


--------------------------------------
소스.cpp저장시간 - 2021-10-03 오후 8:39:15 일요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        4주 1일 - 1교시
  
  C++은 자료를 어떻게 정렬하는가 - sort 함수로 정렬하면 된다.

  함수? - 확장
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <string>
#include <random>
#include <thread>
#include "save.h"
#include <fstream>


//---------
int main() 
//---------
{
	string str[]{"2021년 9월", "코로나", "4단계", "추석", "강의동영상", "C++", "정렬"};

	// 가독성이 좋은 코드

	qsort(str, 6, 32, [](const void* a, const void* b) {
		string s1 = *(string*)(a);
		string s2 = *(string*)(b);

		if (s1 > s2)
			return 1;
		else if (s1 < s2)
			return -1;
		return 0;
		});


	cout << " --- 정렬한 결과 --- " << endl;
	for (string s : str)
		cout << s << endl;

	save("소스.cpp");  
}

 


--------------------------------------
소스.cpp저장시간 - 2021-10-03 오후 10:26:11 일요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        4주 1일 - 1교시
  
  C++은 자료를 어떻게 정렬하는가 - sort 함수로 정렬하면 된다.

  함수? - 확장
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <random>
#include "save.h"
using namespace std;


//---------
int main() 
//---------
{
	default_random_engine dre;
	uniform_int_distribution<> uid{ 1, 1000 };

	int a[1000];

	for (int& num : a)
		num = uid(dre);

	// 내림차순 정렬
	qsort(a, size(a), sizeof(int), [](const void* a, const void* b) {
		return *(int*)b - *(int*)a;
		});


	cout << "내림차순 정렬 후" << endl;
	for (int num : a)
		cout << num << " ";
	cout << endl << endl;


	save("소스.cpp");  
}

 


--------------------------------------
소스.cpp저장시간 - 2021-10-03 오후 10:57:46 일요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        4주 1일 - 2교시
  
  C++은 자료를 어떻게 정렬하는가 - sort 함수로 정렬하면 된다.

  함수
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

void makeDouble(int&);

//---------
int main() 
//---------
{
	// [실습] 정수를 인자로 받아 정수의 값을 2배로 바꾸는 함수 makeDouble을 작성하라.
	// 다음 문장이 화면 출력 예와 같이 출력되어야 한다.

	int n{ 123 };

	makeDouble(n);

	cout << n << endl;

	save("소스.cpp");  
}

void makeDouble(int& n)
{
	n *= 2;
}



--------------------------------------
소스.cpp저장시간 - 2021-10-03 오후 11:40:48 일요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        4주 1일 - 2교시
  
  C++은 자료를 어떻게 정렬하는가 - sort 함수로 정렬하면 된다.

  함수
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

int add(int, int);

//---------
int main() 
//---------
{
	cout << (*add)(111, 222) << endl;

	save("소스.cpp");  
}

int add(int a, int b)
{
	return a + b;
}





--------------------------------------
소스.cpp저장시간 - 2021-10-03 오후 11:49:49 일요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        4주 1일 - 2교시
  
  C++은 자료를 어떻게 정렬하는가 - sort 함수로 정렬하면 된다.

  함수는 무엇인가? - 실행 파일의 메모리 세그먼트 중에서 CODE에 기록되는 기계어들
	-함수의 이름은 메모리의 시작번지를 의미한다.
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

int add(int, int);
int sub(int, int);

//---------
int main() 
//---------
{
	// 함수 포인터
	// 자료형 변수 = add
	int (*f)(int, int) = add;

	cout << f(3, 4) << endl;

	// 함수 포인터 f는 add 함수를 가리킬 수 있고 sub 함수를 가리킬 수 있다. (즉, 필요에 따라 바꿀 수 있다.)

	save("소스.cpp");  
}

int add(int a, int b)
{
	return a + b;
}

int sub(int a, int b)
{
	return a - b;
}



--------------------------------------
소스.cpp저장시간 - 2021-10-03 오후 11:55:50 일요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        4주 1일 - 2교시
  
  C++은 자료를 어떻게 정렬하는가 - sort 함수로 정렬하면 된다.

  함수는 무엇인가? - 실행 파일의 메모리 세그먼트 중에서 CODE에 기록되는 기계어들
	-함수의 이름은 메모리의 시작번지를 의미한다.

auto - 컴파일러가 자료형을 유추하도록 한다.
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

int add(int, int);

//---------
int main() 
//---------
{
	auto f = add;

	// 자료형의 메모리 크기를 확인하는 법
	cout << sizeof(f) << endl;
	cout << sizeof(int(*)(int, int)) << endl;
	
	cout << f(3, 4) << endl;


	save("소스.cpp");  
}

int add(int a, int b)
{
	return a + b;
}




--------------------------------------
소스.cpp저장시간 - 2021-10-03 오후 11:57:06 일요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        4주 1일 - 2교시
  
  C++은 자료를 어떻게 정렬하는가 - sort 함수로 정렬하면 된다.

  함수는 무엇인가? - 실행 파일의 메모리 세그먼트 중에서 CODE에 기록되는 기계어들
	-함수의 이름은 메모리의 시작번지를 의미한다.

auto - 컴파일러가 자료형을 유추하도록 한다.
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

int add(int, int);

//---------
int main() 
//---------
{
	auto f = add;

	// 자료형의 메모리 크기를 확인하는 법
	cout << sizeof(f) << endl;
	cout << sizeof(int(*)(int, int)) << endl;
	
	// 자료형을 확인하는 키워드
	cout << "f의 자료형 - " << typeid(f).name() << endl;

	cout << f(3, 4) << endl;


	save("소스.cpp");  
}

int add(int a, int b)
{
	return a + b;
}




--------------------------------------
소스.cpp저장시간 - 2021-10-04 오전 12:04:11 월요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        4주 1일 - 2교시
  
  C++은 자료를 어떻게 정렬하는가 - sort 함수로 정렬하면 된다.

  함수는 무엇인가? - 실행 파일의 메모리 세그먼트 중에서 CODE에 기록되는 기계어들
	-함수의 이름은 메모리의 시작번지를 의미한다.

  auto - 컴파일러가 자료형을 유추하도록 한다.
  자료형 자체를 확인 - typeid( ? ).name();
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

// [문제] 내가 부를 일이 없지만 기능만이 필요할 때 사용하는 이름없는 함수 lambda

//---------
int main() 
//---------
{
	// "안녕! 난 람다라고 해!" 를 출력하는 람다를 작성하고 호출하라.
	// 함수는 어떻게 호출하나? - ()을 써서 호출한다.
	// ( ) -> function call operator (함수 호출 연산자)

	[]() {
		cout << "안녕? 난 람다라고 해!" << endl;
	}();

	
	save("소스.cpp");  
}





--------------------------------------
소스.cpp저장시간 - 2021-10-04 오전 12:05:10 월요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        4주 1일 - 2교시
  
  C++은 자료를 어떻게 정렬하는가 - sort 함수로 정렬하면 된다.

  함수는 무엇인가? - 실행 파일의 메모리 세그먼트 중에서 CODE에 기록되는 기계어들
	-함수의 이름은 메모리의 시작번지를 의미한다.

  auto - 컴파일러가 자료형을 유추하도록 한다.
  자료형 자체를 확인 - typeid( ? ).name();

  [정리] 내가 부를 일은 없지만 기능만이 필요할 때 사용하는 이름없는 함수 lambda
  ??? - 함수의 인자로 전달되어 함수의 기능을 변경할 때 람다를 사용한다.
  qsort(,,,,오름차순)
  qsort(,,,,내림차순)
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

// [문제] 내가 부를 일이 없지만 기능만이 필요할 때 사용하는 이름없는 함수 lambda

//---------
int main() 
//---------
{
	// "안녕! 난 람다라고 해!" 를 출력하는 람다를 작성하고 호출하라.
	// 함수는 어떻게 호출하나? - ()을 써서 호출한다.
	// ( ) -> function call operator (함수 호출 연산자)

	auto f = []() {
		cout << "안녕? 난 람다라고 해!" << endl;
	};

	f();
	
	save("소스.cpp");  
}









--------------------------------------
소스.cpp저장시간 - 2021-10-04 오전 2:35:49 월요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        4주 2일 - 1교시
  
  자료형과 변수 - 지역, 전역, 동적할당
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

int 전역;

//---------
int main() 
//---------
{
	int 지역{};

	cout << 지역 << endl;
	cout << 전역 << endl;

	int* 동적 = new int;		// 이 동작은 시스템에게 int 만큼의 메모리를 달라는 동작이다.
							// 시스템은 관리하는 메모리 중에서 요청하는 크기만큼 비어있는 공간이 있다면
							// Free sotre에서 해당 메모리를 사용중으로 표시하고 그 시작 번지를 리턴한다.
	
	*동적 = 123;

	// [실습] 각 변수의 메모리 번지를 화면에 출력하라. (5분)

	cout << "지역 변수 - " << &지역 << endl;
	cout << "전역 변수 - " << &전역 << endl;
	cout << "동적할당 변수 - " << 동적 << endl ;
	cout << "코드 - " << (void*)main;

	save("소스.cpp");  
}





--------------------------------------
소스.cpp저장시간 - 2021-10-04 오전 2:48:29 월요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        4주 2일 - 1교시
  
  자료형과 변수 - 지역, 전역, 동적할당
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 원하는 숫자 만큼 정수 메모리를 확보하라.
// 그 값을 1부터 시작하는 정수로 채워라.
// (예) 사용자가 요구하는 수가 10이라면
// [1][2][3][4][5][6][7][8][9][10];		(10분)

//---------
int main() 
//---------
{
	cout << "int 몇개가 필요하십니까? ";
	int num;
	cin >> num;

	int* p = new int[num];

	for (int i = 0; i < num; ++i)
		p[i] = i + 1;			// syntatic sugar (꿀문법)

	for (int i = 0; i < num; ++i)
		cout << p[i] << " ";
	cout << endl;

	save("소스.cpp");  
}





--------------------------------------
소스.cpp저장시간 - 2021-10-04 오전 2:52:56 월요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        4주 2일 - 1교시
  
  자료형과 변수 - 지역, 전역, 동적할당
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 원하는 숫자 만큼 정수 메모리를 확보하라.
// 그 값을 1부터 시작하는 정수로 채워라.
// (예) 사용자가 요구하는 수가 10이라면
// [1][2][3][4][5][6][7][8][9][10];		(10분)
// 이 과정을 영원히 반복하라. (값이 -이면 끝내라)

//---------
int main() 
//---------
{
	while (true) {
		cout << "int 몇개가 필요하십니까? ";
		int num;
		cin >> num;
		if (num <= 0)
			break;

		int* p = new int[num];

		for (int i = 0; i < num; ++i)
			p[i] = i + 1;			// syntatic sugar (꿀문법)

		for (int i = 0; i < num; ++i)
			cout << p[i] << " ";
		cout << endl;
	}

	save("소스.cpp");  
}





--------------------------------------
소스.cpp저장시간 - 2021-10-04 오후 5:25:29 월요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        4주 2일 - 2교시
  
  CODE
  DATA
  STACK
  Free Store(HEAP) - 동적할당
		키워드 new로 메모리를 요청한다.
			  할방받은 메모리를 사용한다(read/write)
		키워드 delete로 메모리를 반환한다.
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 원하는 숫자 만큼 정수 메모리를 확보하라.
// 그 값을 1부터 시작하는 정수로 채워라.
// (예) 사용자가 요구하는 수가 10이라면
// [1][2][3][4][5][6][7][8][9][10];		(10분)
// 이 과정을 영원히 반복하라. (값이 -이면 끝내라)

//---------
int main() 
//---------
{
	while (true) {
		cout << "int 몇개가 필요하십니까? ";
		int num;
		cin >> num;
		if (num <= 0)
			break;

		// 메모리 확보에 실패한 경우는 어떻게 하나?
		int* p = new int[num];					// int []

		cout << "할당받은 메모리의 시작번지 - " << p << endl;

		for (int i = 0; i < num; ++i)
			p[i] = i + 1;			// syntatic sugar (꿀문법)

		
		// 첫 원소와 마지막 원소의 값을 출력하라.
		cout << p[0] << " - " << p[num - 1] << endl;
		cout << endl;

		// 사용이 끝나면 delete로 반환한다.
		delete[] p;
	}

	save("소스.cpp");  
}





--------------------------------------
소스.cpp저장시간 - 2021-10-04 오후 5:41:06 월요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        4주 2일 - 2교시
  
  CODE
  DATA
  STACK
  Free Store(HEAP) - 동적할당
		키워드 new로 메모리를 요청한다.
			  할방받은 메모리를 사용한다(read/write)
		키워드 delete로 메모리를 반환한다.
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <random>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 정수만큼 메모리를 확보하라. (동적할당)
// 확보한 메모리를 랜덤값(엔진/분포)으로 채워라.
// 가장 큰 값을 찾아 화면에 출력하라.
// 이 과정을 사용자가 0 이하의 수를 입력할 때 까지 영원히 반복하라.

//---------
int main() 
//---------
{
	default_random_engine dre;
	uniform_int_distribution<int> uid;

	int num;
	int* p;

	while(true) {
		cout << "원하는 정수의 갯수를 알려주세요. ";
		cin >> num;

		if (num <= 0)
			break;

		// 메모리를 할당 받는다.
		p = new int[num];


		// 값을 채운다.
		for (int i = 0; i < num; ++i)
			p[i] = uid(dre);

		// 가장 큰 값을 찾기
		int maxValue{ 0 };

		for (int i = 0; i < num; ++i)
			if (maxValue < p[i])			// 선형알고리즘
				maxValue = p[i];

		cout << "가장 큰 값은 - " << maxValue << endl;

		// 메모리를 반환한다.
		delete[] p;
	}

	save("소스.cpp");  
}





--------------------------------------
소스.cpp저장시간 - 2021-10-05 오전 1:23:12 화요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        5주 1일 - 1교시
  
  실습 문제 
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

// C++ 입출력

// [문제] 사용자가 원하는 양의 정수(num이라 하자)를 한 개 입력받아
//        1부터 num까지 정수의 합을 계산하여 화면 출력하는 코드를 작성하고 답지에 써라.
//		  프로그램은 반복실행이 가능해야 한다.
// (가정) 사용자는 언제나 양의 정수를 입력한다.
// 
// (예) 사용자가 10을 입력하였다.
//		프로그램은 1 + 2 + 3 + ... + 10 의 합인 55를 화면에 출력한다.	(10분)

//---------
int main() 
//---------
{

	// 여기에 들어갈 코드를 작성하면 된다.

	while (true) {
		cout << "양의 정수를 입력하면 1부터 그 정수까지의 합을 출력하겠습니다." << endl;
		cout << endl;

		cout << "정수를 입력하세요 - ";
		int num;
		cin >> num;

		if (num <= 0)
			break;

		int sum{ 0 };

		for (int i = 1; i <= num; ++i)
			sum += i;

		cout << "1 부터 " << num << "까지의 합계는 - " << sum << "입니다." << endl;
	}

	save("소스.cpp");  
}





--------------------------------------
소스.cpp저장시간 - 2021-10-05 오전 2:11:11 화요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        5주 1일 - 1교시
  
  실습 문제 
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

// C++ 입출력

// [문제] 사용자가 입력한 정수의 합을 계산하는 코드를 작성하라.
// 사용자는 정수를 마음껏 입력할 수 있다.
// 사용자가 0을 입력하면 합계를 화면출력하라.
// 이 과정을 반복하도록 코딩하라.

//---------
int main() 
//---------
{
	save("소스.cpp");

	// 여기에 들어갈 코드를 작성하면 된다.
	
	cout << "입력한 정수의 합을 계산합니다." << endl;
	cout << "정수를 계속 입력하고 끝내려면 0을 입력하세요" << endl;
	cout << endl;

	while (true) {
		cout << "더하기를 시작합니다." << endl;

		int sum{ 0 };

		while (true) {
			int num;
			cin >> num;
			sum += num;

			if (0 == num) {
				cout << "합계는 " << sum << " 입니다." << endl;
				break;
			}
		}
	}
	
	
}





--------------------------------------
소스.cpp저장시간 - 2021-10-07 오전 2:03:03 목요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        5주 1일 - 2교시
  
  실습 문제 - 입출력(처리해야 할 자료가 키보드로부터 입력되는 경우)
  처리해야 할 자료는 대부분 파일에 있다.
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
#include <fstream>
using namespace std;

// C++ 파일 입출력

// [문제] "소스.cpp"에 '#' 문자가 몇 개 있는지 세서 출력하라. (10분)
// (1)파일을 열 수 있어야 한다.
// (2)파일에서 원하는 자료형을 메모리로 읽어 올 수 있어야 한다.

//---------
int main()   
//---------
{
	// 여기에 들어갈 코드를 작성하면 된다.
	
	ifstream in{ "소스.cpp" };

	if (!in) {
		cout << "파일 열기 실패" << endl;
		return 0;
	}

	char ch;
	int cnt{};

	while (in >> ch) {
		cout << ch;
		if ('#' == ch)
			cnt++;
	}

	save("소스.cpp"); 
}





--------------------------------------
소스.cpp저장시간 - 2021-10-07 오전 2:03:47 목요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        5주 1일 - 2교시
  
  실습 문제 - 입출력(처리해야 할 자료가 키보드로부터 입력되는 경우)
  처리해야 할 자료는 대부분 파일에 있다.
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
#include <fstream>
using namespace std;

// C++ 파일 입출력

// [문제] "소스.cpp"에 '#' 문자가 몇 개 있는지 세서 출력하라. (10분)
// (1)파일을 열 수 있어야 한다.
// (2)파일에서 원하는 자료형을 메모리로 읽어 올 수 있어야 한다.

//---------
int main()   
//---------
{
	// 여기에 들어갈 코드를 작성하면 된다.
	
	ifstream in{ "소스.cpp" };

	if (!in) {
		cout << "파일 열기 실패" << endl;
		return 0;
	}

	char ch;
	int cnt{};

	while (in >> ch) {
		if ('#' == ch)
			cnt++;
	}

	cout << "#의 갯수 - " << cnt <<endl;

	save("소스.cpp"); 
}





--------------------------------------
소스.cpp저장시간 - 2021-10-07 오후 10:15:28 목요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        5주 1일 - 2교시
  
  실습 문제 - 입출력(처리해야 할 자료가 키보드로부터 입력되는 경우)
  처리해야 할 자료는 대부분 파일에 있다.
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
#include <fstream>
#include <string>
using namespace std;

// C++ 파일 입출력

// [문제] 파일 이름을 입력받아 그 파일에 모두 몇 개의 단어(공백으로 분리된 문자열)
// 있는지 출력하라.
// (핵심) C++에서 단어를 처리하려면 string을 사용한다.

//---------
int main()   
//---------
{
	// 여기에 들어갈 코드를 작성하면 된다.

	cout << "파일에 있는 단어의 갯수를 셉니다." << endl;
	cout << endl;

	cout << "파일 이름은? ";
	string name;
	cin >> name;

	ifstream in{ name };

	if (!in) {
		cout << name << "을 열 수 없습니다." << endl;
	}

	string str;

	while (in >> str)
		cout << str << endl;

	save("소스.cpp"); 
}





--------------------------------------
소스.cpp저장시간 - 2021-10-07 오후 10:18:08 목요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        5주 1일 - 2교시
  
  실습 문제 - 입출력(처리해야 할 자료가 키보드로부터 입력되는 경우)
  처리해야 할 자료는 대부분 파일에 있다.
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
#include <fstream>
#include <string>
using namespace std;

// C++ 파일 입출력

// [문제] 파일 이름을 입력받아 그 파일에 모두 몇 개의 단어(공백으로 분리된 문자열)
// 있는지 출력하라.
// (핵심) C++에서 단어를 처리하려면 string을 사용한다.

//---------
int main()   
//---------
{
	// 여기에 들어갈 코드를 작성하면 된다.

	cout << "파일에 있는 단어의 갯수를 셉니다." << endl;
	cout << endl;

	cout << "파일 이름은? ";
	string name;
	cin >> name;

	ifstream in{ name };

	if (!in) {
		cout << name << "을 열 수 없습니다." << endl;
	}

	string str;
	int cnt{};

	while (in >> str)
		cnt++;

	cout << name << "에는 모두 " << cnt << "개의 단어가 있습니다." << endl;

	save("소스.cpp"); 
}





--------------------------------------
소스.cpp저장시간 - 2021-10-07 오후 10:31:36 목요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        5주 1일 - 2교시
  
  실습 문제 - 입출력(처리해야 할 자료가 키보드로부터 입력되는 경우)
  처리해야 할 자료는 대부분 파일에 있다.
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
#include <fstream>
#include <random>
#include <string>
using namespace std;
 
// C++ 파일 입출력

default_random_engine dre;
uniform_int_distribution<> uid{ 'a', 'z' };

//---------
int main()   
//---------
{
	for (int i = 0; i < 1000; ++i)
		cout << static_cast<char>(uid(dre));

	save("소스.cpp"); 
}





--------------------------------------
소스.cpp저장시간 - 2021-10-07 오후 10:32:07 목요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        5주 1일 - 2교시
  
  실습 문제 - 입출력(처리해야 할 자료가 키보드로부터 입력되는 경우)
  처리해야 할 자료는 대부분 파일에 있다.
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
#include <fstream>
#include <random>
#include <string>
using namespace std;
 
// C++ 파일 입출력

default_random_engine dre;
uniform_int_distribution<> uid{ 'a', 'z' };

//---------
int main()   
//---------
{
	ofstream out{ "글자들.txt" };

	for (int i = 0; i < 1000; ++i)
		out << static_cast<char>(uid(dre));

	save("소스.cpp"); 
}





--------------------------------------
소스.cpp저장시간 - 2021-10-09 오전 1:34:09 토요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        5주 2일 - 1교시
  
  실습 문제 - 입출력(처리해야 할 자료가 키보드로부터 입력되는 경우)
  처리해야 할 자료는 대부분 파일에 있다.
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
#include <fstream>
#include <random>
#include <string>
using namespace std;
 
// C++ 파일 입출력

// [문제] "글자들.txt"에는 소문자 1'000개가 저장되어 있다.
//
// 문제 1. c는 모두 몇 개가 있나 출력하라.
// 'c'는 모두 몇 개가 있나 출력하라. 1'000 / 26

//---------
int main()   
//---------
{
	// 여기에 들어갈 코드를 답지에 적어라

	char alphabet[1000];

	ifstream in{ "글자들.txt" };

	char ch;
	
	for (char& c : alphabet) {
		in >> ch;
		c = ch;
	}
	
	// c의 갯수를 세자
	int cnt{ 0 };

	for (char c : alphabet)
		if ('c' == c)
			cnt++;

	cout << "c의 갯수는 - " << cnt << endl;

	save("소스.cpp"); 
}






--------------------------------------
소스.cpp저장시간 - 2021-10-09 오전 1:48:47 토요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        5주 2일 - 1교시
  
  실습 문제 - 입출력(처리해야 할 자료가 키보드로부터 입력되는 경우)
  처리해야 할 자료는 대부분 파일에 있다.
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
#include <fstream>
#include <random>
#include <string>
using namespace std;
 
// C++ 파일 입출력

// [문제] "글자들.txt"에는 소문자 1'000개가 저장되어 있다.
//
// 문제 1. c는 모두 몇 개가 있나 출력하라.
// 'c'는 모두 몇 개가 있나 출력하라. 1'000 / 26

//---------
int main()   
//---------
{
	// 여기에 들어갈 코드를 답지에 적어라

	ifstream in{ "글자들.txt" };

	char ch;
	int cnt{ };

	while (in >> ch) {
		if('c' == ch)
		cnt ++;
	}

	cout << "c의 갯수는 - " << cnt << endl;

	save("소스.cpp"); 
}





--------------------------------------
소스.cpp저장시간 - 2021-10-09 오후 9:14:49 토요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        5주 2일 - 1교시
  
  sort - 함수
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
#include <random>
#include <string>
using namespace std;
 
// STACK - 지역변수가 사는 공간
//       - 함수를 호출할 떄 되돌아올 번지가 저장되는 공간

// [문제] 다음 문장을 실행하여
// "여러분 안녕하세요?" 라고 출력되도록 필요한 코딩을 하고 답지에 적어라.
// main()의 코드는 한 글자도 수정하면 안된다. (5분)

void f(string&, string&);

//---------
int main()   
//---------
{
	string a{ "안녕하세요?" };
	string b{ "여러분" };

	f(a, b);

	cout << a << " " << b << endl;

	save("소스.cpp"); 
}

void f(string& a, string& b)
{
	string temp{ a };
	a = b;
	b = temp;
}



--------------------------------------
소스.cpp저장시간 - 2021-10-09 오후 9:36:37 토요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        5주 2일 - 1교시
  
  sort - 함수
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
#include <algorithm>
using namespace std;
 
// STACK - 지역변수가 사는 공간
//       - 함수를 호출할 떄 되돌아올 번지가 저장되는 공간

// [문제] 배열 a의 원소를 값 오름차순으로 정렬하고 출력하라.

//---------
int main()   
//---------
{
	char a[] { "this is a sample" };

	qsort(a, size(a), sizeof(a[0]), [](const void* p, const void* q) {
		return *(char*)q - *(char*)p;
		});

	cout << a << endl;

	save("소스.cpp"); 
}



--------------------------------------
소스.cpp저장시간 - 2021-10-09 오후 9:38:57 토요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        5주 2일 - 1교시
  
  sort - 함수
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
#include <algorithm>
using namespace std;
 
// STACK - 지역변수가 사는 공간
//       - 함수를 호출할 떄 되돌아올 번지가 저장되는 공간

// [문제] 배열 a의 원소를 값 오름차순으로 정렬하고 출력하라.

//---------
int main()   
//---------
{
	char a[] { "this is a sample" };

	sort(begin(a), end(a), [](char a, char b) {
		return a < b;
		});

		// 오름차순은 실행창에 아무것도 찍히지 않는다. 당황하지말것!

	cout << a << endl;

	save("소스.cpp"); 
}




--------------------------------------
소스.cpp저장시간 - 2021-10-09 오후 9:40:05 토요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        5주 2일 - 1교시
  
  sort - 함수
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
#include <algorithm>
using namespace std;
 
// STACK - 지역변수가 사는 공간
//       - 함수를 호출할 떄 되돌아올 번지가 저장되는 공간

// [문제] 배열 a의 원소를 값 오름차순으로 정렬하고 출력하라.

//---------
int main()   
//---------
{
	char a[] { "this is a sample" };

	sort(begin(a), end(a), [](char a, char b) {
		return b < a;
		});

	cout << a << endl;

	save("소스.cpp"); 
}



--------------------------------------
소스.cpp저장시간 - 2021-10-09 오후 9:45:26 토요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        5주 2일 - 1교시
  
  sort - 함수
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
#include <algorithm>
#include <string>
using namespace std;

// [문제] 배열 strs의 원소를 값 오름차순으로 정렬하고 출력하라.

//---------
int main()   
//---------
{
	string strs[]{ "파일", "편집", "보기", "Git", "프로젝트" };

	sort(begin(strs), end(strs), [](string a, string b) {
		return a < b;
		});

	for (string s : strs)
		cout << s << endl;

	save("소스.cpp"); 
}



--------------------------------------
소스.cpp저장시간 - 2021-10-09 오후 9:45:42 토요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        5주 2일 - 1교시
  
  sort - 함수
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
#include <algorithm>
#include <string>
using namespace std;

// [문제] 배열 strs의 원소를 값 오름차순으로 정렬하고 출력하라.

//---------
int main()   
//---------
{
	string strs[]{ "파일", "편집", "보기", "Git", "프로젝트" };

	sort(begin(strs), end(strs), [](string a, string b) {
		return a > b;
		});

	for (string s : strs)
		cout << s << endl;

	save("소스.cpp"); 
}



--------------------------------------
소스.cpp저장시간 - 2021-10-10 오전 2:05:00 일요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        5주 2일 - 2교시
  
  class - 사용자 정의 자료형
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

class A {
	// 필요한 메모리를 적는다.
	int n[10];		// sizeof(int) * 10
	
};

//---------
int main()   
//---------
{
	A B;

	// A의 메모리 크기를 출력하라.
	cout << sizeof(A) << endl;

	// B의 자료형을 출력하라
	cout << typeid(B).name() << endl;

	save("소스.cpp"); 
}



--------------------------------------
소스.cpp저장시간 - 2021-10-10 오전 2:23:09 일요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        5주 2일 - 2교시
  
  class - 사용자 정의 자료형
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

struct Point2D {
	double x;
	double y;
};

//---------
int main()   
//---------
{
	Point2D a;
	a.x = 10;
	a.y = 10;

	cout << sqrt(a.x * a.x + a.y * a.y);

	save("소스.cpp"); 
}



--------------------------------------
소스.cpp저장시간 - 2021-10-10 오전 2:36:15 일요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        5주 2일 - 2교시
  
  class - 사용자 정의 자료형
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
#include <random>
using namespace std;

struct Point2D {
	double x;
	double y;

	void show() {
			cout << "(" << x << ", " << y << ")" << endl;
	}
};

// [문제] 2차원 점 1000개를 만들고 좌표값을 [-100, 100]인 랜덤값으로 만들어라.
// 원점(0,0)에서 반경 20까지 영향을 미치는 폭탄이 터졌다.
// 모두 몇 개의 점이 영향을 받는지 출력하라.		(20분)

//---------
int main()   
//---------
{
	Point2D points[1000];		// 16kB

	default_random_engine dre;
	uniform_int_distribution<> uid{ -100, 100 };

	for (Point2D& point : points) {
		point.x = uid(dre);
		point.y = uid(dre);
	}

	for (Point2D point : points)
		point.show();

	save("소스.cpp"); 
}



--------------------------------------
소스.cpp저장시간 - 2021-10-10 오전 2:39:55 일요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        5주 2일 - 2교시
  
  class - 사용자 정의 자료형
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
#include <random>
using namespace std;

struct Point2D {
	double x;
	double y;

	void show() {
			cout << "(" << x << ", " << y << ")" << endl;
	}
};

// [문제] 2차원 점 1000개를 만들고 좌표값을 [-100, 100]인 랜덤값으로 만들어라.
// 원점(0,0)에서 반경 20까지 영향을 미치는 폭탄이 터졌다.
// 모두 몇 개의 점이 영향을 받는지 출력하라.		(20분)

//---------
int main()   
//---------
{
	Point2D points[1000];		// 16kB

	default_random_engine dre;
	uniform_int_distribution<> uid{ -100, 100 };

	for (Point2D& point : points) {
		point.x = uid(dre);
		point.y = uid(dre);
	}

	// 반경 20 이하인 점만 화면에 출력하자

	int cnt{};
	for (Point2D point : points) {
		if (sqrt(point.x * point.x + point.y * point.y) <= 20) {
			point.show();
			cnt++;
		}
	}

	cout << "반경 20이하인 점의 갯수 - " << cnt << endl;

	save("소스.cpp"); 
}



--------------------------------------
소스.cpp저장시간 - 2021-10-14 오전 1:11:10 목요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        6주 1일 - 1교시
  
  class/struct - 사용자 정의 자료형
  - struct와 class의 차이
  - 멤버 변수, 멤버 함수 
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
#include <random>
using namespace std;

struct Point3D {
	double x;
	double y;
	double z;

	char flag;
};
 
//---------
int main()   
//---------
{
	Point3D n;

	cout << sizeof(n) << endl;

	save("소스.cpp"); 
}



--------------------------------------
소스.cpp저장시간 - 2021-10-14 오전 1:24:23 목요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        6주 1일 - 1교시
  
  class/struct - 사용자 정의 자료형
  - struct와 class의 차이
  - 멤버 변수, 멤버 함수 
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
#include <random>
using namespace std;

struct Point3D {
	double x;
	double y;
	double z;

	char flag;
};
 
//---------
int main()   
//---------
{
	// 나는 속도에 관심없다. 메모리를 희생하지 않고싶다.
	// 속성 -> 코드 생성 -> 구조제 멤버 맞춤

	Point3D n;

	cout << sizeof(n) << endl;

	save("소스.cpp"); 
}



--------------------------------------
소스.cpp저장시간 - 2021-10-14 오전 1:53:56 목요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        6주 1일 - 1교시
  
  class/struct - 사용자 정의 자료형
  - struct와 class의 차이
    자료형으로서 객체를 찍어내는 틀이다.

  - 멤버 변수, 멤버 함수 

  내가 만든 자료형의 메모리 크기
  - 구조체 맞춤 (컴파일러에게 구조체가 차지하는 메모리 크기를 지시할 수 있다.)
  - 멤버함수는 객체가 차지하는 메모리 크기에 포함되지 않는다.
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
#include <random>
using namespace std;

struct Point2D {
	double x;
	double y;

	void show() {
		cout << x << ", " << y << endl;
	}
};



//---------
int main()   
//---------
{
	Point2D p[3];
	
	for (Point2D point : p)
		point.show();

	save("소스.cpp"); 
}



--------------------------------------
소스.cpp저장시간 - 2021-10-15 오후 11:26:06 금요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        6주 1일 - 1교시
  
  class/struct - 사용자 정의 자료형
  - struct와 class의 차이
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

struct Point2D {
	int x;
	int y;

	Point2D() {
		cout << "생성자(creator - ctor)가 호출되었다." << endl; 
		x = 2010;
		y = 10;
	}

	void show() {
		cout << x << ", " << y << endl;
	}
};

//---------
int main()   
//---------
{
	// 자료형 Point2D는 2차원 좌표이다. 모든 Point2D는 초깃값이 (2021, 10) 이어야 한다.

	Point2D p;		// 객체를 인자없이 생성하는 순간
					// 컴파일러는 Point2D의 디폴트생성자를 호출한다.
					// 생성자는 Point2D와 이름이 같은 함수이다.
					// 디폴트 생성자는 따라서 Point2D() 이다.

	p.show();

	save("소스.cpp"); 
}



--------------------------------------
소스.cpp저장시간 - 2021-10-15 오후 11:35:36 금요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        6주 1일 - 1교시
  
  class/struct - 사용자 정의 자료형
  - struct와 class의 차이
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

struct Point2D {
	int x;
	int y;

	// 디폴트 생성자
	Point2D() {
		cout << "생성자(creator - ctor)가 호출되었다." << endl; 
		x = 2010;
		y = 10;
	}

	void show() {
		cout << x << ", " << y << endl;
	}
};

//---------
int main()   
//---------
{
	// 자료형 Point2D는 2차원 좌표이다. 모든 Point2D는 초깃값이 (2021, 10) 이어야 한다.

	Point2D p[20];	

	for (auto p : p) {
		p.show();
	}

	save("소스.cpp"); 
}



--------------------------------------
소스.cpp저장시간 - 2021-10-16 오전 12:11:16 토요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        6주 1일 - 1교시
  
  class/struct - 사용자 정의 자료형
  - struct와 class의 차이

  객체가 생성된 후
  클래스 설계자는 생성된 메모리의 내용을 마음대로 채울 수 있다. - 생성자 호출을 통해

  과제 - 함수 오버로딩을 찾아본다.
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

struct Point2D {
	int x;
	int y;

	// 디폴트 생성자
	Point2D() {
		cout << "생성자(creator - ctor)가 호출되었다." << endl; 
		x = 2010;
		y = 10;
	}

	// 생성자는 overloading 할 수 있다.
	Point2D(int a, int b) {
		cout << "(int, int)를 인자로 받는 생성자가 호출되었다" << endl;
		x = a;
		y = b;
	}

	void show() {
		cout << x << ", " << y << endl;
	}
};

//---------
int main()   
//---------
{
	// 자료형 Point2D는 2차원 좌표이다. 모든 Point2D는 초깃값이 (2021, 10) 이어야 한다.

	Point2D p;	

	p.show();

	Point2D q(333, 444);

	q.show();

	save("소스.cpp"); 
}



--------------------------------------
소스.cpp저장시간 - 2021-10-16 오전 12:55:49 토요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        6주 1일 - 1교시
  
  class/struct - 사용자 정의 자료형
  - struct와 class의 차이

  객체가 생성된 후
  클래스 설계자는 생성된 메모리의 내용을 마음대로 채울 수 있다. - 생성자 호출을 통해

  과제 - 함수 오버로딩을 찾아본다.
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

struct Point2D {
	int x{ 2010 };
	int y{ 10 };

	Point2D() {

	}

	void show() {
		cout << x << ", " << y << endl;
	}
};

//---------
int main()   
//---------
{
	// 자료형 Point2D는 2차원 좌표이다. 모든 Point2D는 초깃값이 (2021, 10) 이어야 한다.

	Point2D p[10000];	
	p[0].show();
	p[9999].show();

	save("소스.cpp"); 
}



--------------------------------------
소스.cpp저장시간 - 2021-10-16 오전 12:57:48 토요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        6주 1일 - 1교시
  
  class/struct - 사용자 정의 자료형
  - struct와 class의 차이

  객체가 생성된 후
  클래스 설계자는 생성된 메모리의 내용을 마음대로 채울 수 있다. - 생성자 호출을 통해

  과제 - 함수 오버로딩을 찾아본다.
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

struct Point2D {
	int x{ 2010 };
	int y{ 10 };

	Point2D() {

	}

	Point2D(int x, int y) : x{ x }, y{ y }{

	}

	void show() {
		cout << x << ", " << y << endl;
	}
};

//---------
int main()   
//---------
{
	// 자료형 Point2D는 2차원 좌표이다. 모든 Point2D는 초깃값이 (2021, 10) 이어야 한다.

	Point2D p[10000];	
	p[0].show();
	p[9999].show();

	Point2D q(333, 444);
	q.show();

	save("소스.cpp"); 
}



--------------------------------------
소스.cpp저장시간 - 2021-10-16 오후 9:21:16 토요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        6주 2일 - 1교시
  
  class/struct - 사용자 정의 자료형
  - struct와 class의 차이
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

struct Point2D {
	int x{ };
	int y{ };

	void show()
	{
		cout << x << ", " << y << endl;
	}
};

//---------
int main()   
//---------
{
	// [문제] Point2D는 2차원 좌표를 나타낸다.
	// 디폴트 생성하면 (0, 0)으로 초기화된다.

	Point2D a{};

	a.show();		// 화면에 (0, 0)이라고 출력되어야 한다.

	save("소스.cpp"); 
}



--------------------------------------
소스.cpp저장시간 - 2021-10-16 오후 9:27:47 토요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        6주 2일 - 1교시
  
  class/struct - 사용자 정의 자료형
  - struct와 class의 차이
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

struct Point2D {
	int x{ };
	int y{ };

	Point2D() {
		cout << "디폴트 생성 - ";
		show();
	}

	void show()
	{
		cout << x << ", " << y << endl;
	}
};

//---------
int main()   
//---------
{
	Point2D a{};

	a.show();	

	save("소스.cpp"); 
}



--------------------------------------
소스.cpp저장시간 - 2021-10-16 오후 10:01:21 토요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        6주 2일 - 1교시
  
  class/struct - 사용자 정의 자료형
  - struct와 class의 차이
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

struct Point2D {
	int x{ };
	int y{ };

	Point2D() {
		cout << "디폴트 생성 - ";
		show();
	}

	Point2D(int x, int y) : x{ x }, y{ y } {
		cout << "인자로 생성 - ";
		show();
	}

	void show()
	{
		cout << x << ", " << y << endl;
	}
};

//---------
int main()   
//---------
{
	Point2D a{};

	Point2D b{ 1, 2 };

	save("소스.cpp"); 
}



--------------------------------------
소스.cpp저장시간 - 2021-10-16 오후 10:36:06 토요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        6주 2일 - 1교시
  
  class/struct - 사용자 정의 자료형
  - struct와 class의 차이
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

struct Point2D {
	int x{ };
	int y{ };

	// 생성자
	Point2D() {
		cout << "디폴트 생성 - ";
		show();
	}

	Point2D(int x, int y) : x{ x }, y{ y } {
		cout << "인자로 생성 - ";
		show();
	}

	// 소멸자 - 메모리를 소멸하는 것이 아니다.
	// 메모리가 해제되기 직전에 호출되는 함수이다.
	~Point2D() {
		cout << "소멸자가 호출되었다" << endl;
	}

	void show()
	{
		cout << x << ", " << y << endl;
	}
};

//---------
int main()   
//---------
{
	Point2D a{};
	Point2D b{ 1, 2 };

	save("소스.cpp"); 
}



--------------------------------------
소스.cpp저장시간 - 2021-10-16 오후 10:40:54 토요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        6주 2일 - 1교시
  
  class/struct - 사용자 정의 자료형
  - struct와 class의 차이
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

struct Point2D {
	int x{ };
	int y{ };

	// 생성자
	Point2D() {
		cout << "디폴트 생성 - ";
		show();
	}

	Point2D(int x, int y) : x{ x }, y{ y } {
		cout << "인자로 생성 - ";
		show();
	}

	// 소멸자 - 메모리를 소멸하는 것이 아니다.
	// 메모리가 해제되기 직전에 호출되는 함수이다.
	~Point2D() {
		cout << "소멸자가 호출되었다 - " << "( " << x << ", " << y << " )" << endl;
	}

	void show()
	{
		cout << x << ", " << y << endl;
	}
};

//---------
int main()   
//---------
{
	Point2D a{};
	Point2D b{ 1, 2 };

	save("소스.cpp"); 
}



--------------------------------------
소스.cpp저장시간 - 2021-10-16 오후 11:13:48 토요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        6주 2일 - 1교시
  
  class/struct - 사용자 정의 자료형
  - struct와 class의 차이
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

struct Point2D {
	int x{ };
	int y{ };

	// 생성자
	Point2D() {
		cout << "디폴트 생성 - ";
		show();
	}

	Point2D(int x, int y) : x{ x }, y{ y } {
		cout << "인자로 생성 - ";
		show();
	}

	// 소멸자 - 메모리를 소멸하는 것이 아니다.
	// 메모리가 해제되기 직전에 호출되는 함수이다.
	~Point2D() {
		cout << "소멸자가 호출되었다 - " << "( " << x << ", " << y << " )" << endl;
	}

	void show()
	{
		cout << x << ", " << y << endl;
	}
};

//---------
int main()   
//---------
{

	{
		Point2D a{};
	}

	Point2D b{ 1, 2 };

	save("소스.cpp"); 
}



--------------------------------------
소스.cpp저장시간 - 2021-10-16 오후 11:54:42 토요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        6주 2일 - 1교시
  
  class/struct - 사용자 정의 자료형(객체를 찍어내는 틀)
  - struct와 class의 차이

  special 동작
  객체가 생성되었다.
  객체가 소멸되었다.
  객체가 복사되었다.
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

struct Point2D {
	int x{ };
	int y{ };

	// constructor 생성자
	Point2D() {
		cout << "디폴트 생성 - ";
		show();
	}

	Point2D(int x, int y) : x{ x }, y{ y } {
		cout << "인자로 생성 - ";
		show();
	}

	// destructor 소멸자 - 메모리를 소멸하는 것이 아니다.
	// 메모리가 해제되기 직전에 호출되는 함수이다.
	~Point2D() {
		cout << "소멸자가 호출되었다 - " << "( " << x << ", " << y << " )" << endl;
	}

	// copy constructor 복사생성자
	Point2D(const Point2D& other) {
		cout << "복사생성자 - ";
		show();
	}

	void show()
	{
		cout << x << ", " << y << endl;
	}
};

//---------
int main()   
//---------
{
	Point2D a;

	Point2D b = a; 

	save("소스.cpp"); 
}



--------------------------------------
소스.cpp저장시간 - 2021-10-16 오후 11:55:07 토요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        6주 2일 - 1교시
  
  class/struct - 사용자 정의 자료형(객체를 찍어내는 틀)
  - struct와 class의 차이

  special 동작
  객체가 생성되었다.
  객체가 소멸되었다.
  객체가 복사되었다.
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

struct Point2D {
	int x{ };
	int y{ };

	// constructor 생성자
	Point2D() {
		cout << "디폴트 생성 - ";
		show();
	}

	Point2D(int x, int y) : x{ x }, y{ y } {
		cout << "인자로 생성 - ";
		show();
	}

	// destructor 소멸자 - 메모리를 소멸하는 것이 아니다.
	// 메모리가 해제되기 직전에 호출되는 함수이다.
	~Point2D() {
		cout << "소멸자가 호출되었다 - " << "( " << x << ", " << y << " )" << endl;
	}

	// copy constructor 복사생성자
	Point2D(const Point2D& other) {
		cout << "복사생성자 - ";
		show();
	}

	void show()
	{
		cout << x << ", " << y << endl;
	}
};

//---------
int main()   
//---------
{
	Point2D a;

	Point2D b { a };

	save("소스.cpp"); 
}



--------------------------------------
소스.cpp저장시간 - 2021-10-16 오후 11:56:52 토요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        6주 2일 - 1교시
  
  class/struct - 사용자 정의 자료형(객체를 찍어내는 틀)
  - struct와 class의 차이

  special 동작
  객체가 생성되었다.
  객체가 소멸되었다.
  객체가 복사되었다.
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

struct Point2D {
	int x{ };
	int y{ };

	// constructor 생성자
	Point2D() {
		cout << "디폴트 생성 - ";
		show();
	}

	Point2D(int x, int y) : x{ x }, y{ y } {
		cout << "인자로 생성 - ";
		show();
	}

	// destructor 소멸자 - 메모리를 소멸하는 것이 아니다.
	// 메모리가 해제되기 직전에 호출되는 함수이다.
	~Point2D() {
		cout << "소멸자가 호출되었다 - " << "( " << x << ", " << y << " )" << endl;
	}

	// copy constructor 복사생성자
	Point2D(const Point2D& other) {
		cout << "복사생성자 - ";
		show();
	}

	void show()
	{
		cout << x << ", " << y << endl;
	}
};

//---------
int main()   
//---------
{
	Point2D a{ 10, 20 };
	Point2D b = a;

	a.show();
	b.show();		// 이렇게 했을 때 0, 0 이 나오는 이유는 위에 복사생성자에 아무것도 안했기 때문이다.

	save("소스.cpp"); 
}



--------------------------------------
소스.cpp저장시간 - 2021-10-17 오전 12:06:37 일요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        6주 2일 - 1교시
  
  class/struct - 사용자 정의 자료형(객체를 찍어내는 틀)
  - struct와 class의 차이

  special 동작
  객체가 생성되었다.
  객체가 소멸되었다.
  객체가 복사되었다.
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

struct Point2D {
	int x{ };
	int y{ };

	// constructor 생성자
	Point2D() {
		cout << "디폴트 생성 - ";
		show();
	}

	Point2D(int x, int y) : x{ x }, y{ y } {
		cout << "인자로 생성 - ";
		show();
	}

	// destructor 소멸자 - 메모리를 소멸하는 것이 아니다.
	// 메모리가 해제되기 직전에 호출되는 함수이다.
	~Point2D() {
		cout << "소멸자가 호출되었다 - " << "( " << x << ", " << y << " )" << endl;
	}

	// copy constructor 복사생성자
	Point2D(const Point2D& other) : x{ other.x }, y{ other.y } {
		cout << "복사생성자 - ";
		show();
	}

	void show()
	{
		cout << x << ", " << y << endl;
	}
};

//---------
int main()   
//---------
{
	Point2D a{ 10, 20 };
	Point2D b = a;

	save("소스.cpp"); 
}



--------------------------------------
소스.cpp저장시간 - 2021-10-17 오전 12:26:43 일요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        6주 2일 - 1교시
  
  class/struct - 사용자 정의 자료형(객체를 찍어내는 틀)
  - struct와 class의 차이

  special 동작(4가지)
  - 객체가 생성되었다.
  - 객체가 소멸되었다.
  - 객체가 복사생성되었다.
  - 객체가 할당되었다.	
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

struct Point2D {
	int x{ };
	int y{ };

	// constructor 생성자
	Point2D() {
		cout << "디폴트 생성 - ";
		show();
	}

	Point2D(int x, int y) : x{ x }, y{ y } {
		cout << "인자로 생성 - ";
		show();
	}

	// destructor 소멸자 - 메모리를 소멸하는 것이 아니다.
	// 메모리가 해제되기 직전에 호출되는 함수이다.
	~Point2D() {
		cout << "소멸자가 호출되었다 - " << "( " << x << ", " << y << " )" << endl;
	}

	// copy constructor 복사생성자
	Point2D(const Point2D& other) : x{ other.x }, y{ other.y } {
		cout << "복사생성자 - ";
		show();
	}

	void show()
	{
		cout << x << ", " << y << endl;
	}
};

//---------
int main()   
//---------
{
	Point2D a{ 10, 20 };
	Point2D b = a;
	Point2D c = a;

	c = a;			// 이 순간은 c의 메모리를 a의 메모리와 같은 내용으로 채워라는 명령
					// 이때 할당연산자가 호출된다.

	c.show();

	save("소스.cpp"); 
}







--------------------------------------
소스.cpp저장시간 - 2021-10-17 오전 1:37:33 일요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        6주 2일 - 1교시
  
  class/struct - 사용자 정의 자료형(객체를 찍어내는 틀)
  - struct와 class의 차이

  special 동작(4가지)
  - 객체가 생성되었다.
  - 객체가 소멸되었다.
  - 객체가 복사생성되었다.
  - 객체가 할당되었다.	
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

struct Point2D {
	int x{ };
	int y{ };

	// constructor 생성자
	Point2D() {
		cout << "디폴트 생성 - ";
		show();
	}

	Point2D(int x, int y) : x{ x }, y{ y } {
		cout << "인자로 생성 - ";
		show();
	}

	// destructor 소멸자 - 메모리를 소멸하는 것이 아니다.
	// 메모리가 해제되기 직전에 호출되는 함수이다.
	~Point2D() {
		cout << "소멸자가 호출되었다 - " << "( " << x << ", " << y << " )" << endl;
	}

	// copy constructor 복사생성자
	Point2D(const Point2D& other) : x{ other.x }, y{ other.y } {
		cout << "복사생성자 - ";
		show();
	}

	// asignment operator 할당연산자
	// c = a
	Point2D& operator = (const Point2D& other) {
		x = other.x;
		y = other.y;

		cout << "할당연산자 - ";
		show();

		return *this;
	}

	void show()
	{
		cout << x << ", " << y << endl;
	}
};

//---------
int main()   
//---------
{
	Point2D a{ 10, 20 };
	Point2D b = a;
	Point2D c;

	c = a;			// 이 순간은 c의 메모리를 a의 메모리와 같은 내용으로 채워라는 명령
					// 이때 할당연산자가 호출된다.

	c.show();

	save("소스.cpp"); 
}



--------------------------------------
소스.cpp저장시간 - 2021-10-17 오전 1:50:47 일요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        6주 2일 - 1교시
  
  class/struct - 사용자 정의 자료형(객체를 찍어내는 틀)
  - struct와 class의 차이

  special 동작(4가지)
  - 객체가 생성되었다.
  - 객체가 소멸되었다.
  - 객체가 복사생성되었다.
  - 객체가 할당되었다.	
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

struct Point2D {
	int x{ };
	int y{ };

	// constructor 생성자
	Point2D() {
		cout << "디폴트 생성 - ";
		show();
	}

	Point2D(int x, int y) : x{ x }, y{ y } {
		cout << "인자로 생성 - ";
		show();
	}

	// destructor 소멸자 - 메모리를 소멸하는 것이 아니다.
	// 메모리가 해제되기 직전에 호출되는 함수이다.
	~Point2D() {
		cout << "소멸자가 호출되었다 - " << "( " << x << ", " << y << " )" << endl;
	}

	// copy constructor 복사생성자
	Point2D(const Point2D& other) : x{ other.x }, y{ other.y } {
		cout << "복사생성자 - ";
		show();
	}

	// asignment operator 할당연산자
	// c = a;
	Point2D& operator = (const Point2D& other) {
		x = other.x;
		y = other.y;

		cout << "할당연산자 - "; 
		show();

		return *this;
	}

	void show()
	{
		cout << x << ", " << y << endl;
	}
};

//---------
int main()   
//---------
{
	Point2D a{ 10, 10 };
	Point2D b{ 20, 20 };
	Point2D c;

	c = a = b = a = c;

	a.show();
	b.show();
	c.show();

	save("소스.cpp"); 
}



--------------------------------------
소스.cpp저장시간 - 2021-10-17 오전 2:04:56 일요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        6주 2일 - 2교시
  
  class/struct - 사용자 정의 자료형(객체를 찍어내는 틀)
  - struct와 class의 차이

  special 동작(4가지)
  - 객체가 생성되었다.
  - 객체가 소멸되었다.
  - 객체가 복사생성되었다.
  - 객체가 할당되었다.	
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

struct Point2D {
	int x{ };
	int y{ };

	// constructor 생성자
	Point2D() {
		cout << "디폴트 생성 - ";
		show();
	}

	Point2D(int x, int y) : x{ x }, y{ y } {
		cout << "인자로 생성 - ";
		show();
	}

	// destructor 소멸자 - 메모리를 소멸하는 것이 아니다.
	// 메모리가 해제되기 직전에 호출되는 함수이다.
	~Point2D() {
		cout << "소멸자가 호출되었다 - " << "( " << x << ", " << y << " )" << endl;
	}

	// copy constructor 복사생성자
	Point2D(const Point2D& other) : x{ other.x }, y{ other.y } {
		cout << "복사생성자 - ";
		show();
	}

	// asignment operator 할당연산자
	// c = a;
	Point2D& operator = (const Point2D& other) {
		// 자신을 자신에게 할당하는 일은 없게 하자.
		if (this == &other)
			return *this;

		x = other.x;
		y = other.y;

		cout << "할당연산자 - "; 
		show();

		return *this;
	}

	void show()
	{
		cout << x << ", " << y << endl;
	}
};

//---------
int main()   
//---------
{
	Point2D a{ 10, 10 };

	a = a = a = a = a = a;

	save("소스.cpp"); 
}



--------------------------------------
소스.cpp저장시간 - 2021-10-17 오전 3:02:23 일요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        6주 2일 - 2교시
  
  class/struct - 사용자 정의 자료형(객체를 찍어내는 틀)
  - struct와 class의 차이
    sturct는 디폴트 public 멤버
	class는 디폴트 private 멤버

	class - 정보은닉(information hiding) 캡슐화

  class에서 멤버를 private으로 해야만 하는 것을 이해할 수 있는 예제 - 다음시간
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
#include "thread"
using namespace std;

// [문제] 다음과 같은 기능을 갖는 class Bell을 코딩하라.
// 생성시 정수를 인자로 받아 저장한다.
// play 함수를 호출하면 생성시 저장한 정수의 수만큼 벨소리를 연주한다.
// 벨소리와 벨소리 사이의 간겨은 1초로 한다.
// 벨소리는 아스키 코드를 사용한다.

class Bell {

	int num{ }; 

public:
	Bell(int n) : num{ n } { }

	void play() {
		for (int i = 0; i < num; ++i) {
			cout << "\7";
			this_thread::sleep_for(1s);
		}
	}
};

//---------
int main()   
//---------
{
	Bell a{ 3 };

	a.play();				// 벨소리 - 1초 - 벨소리 - 1초 - 벨소리 - 1초

	save("소스.cpp"); 
}



--------------------------------------
소스.cpp저장시간 - 2021-10-17 오후 1:43:11 일요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        7주 1일 - 1교시
  
  멤버변수가 private 이어야 하는 이유를 살펴 볼 수 있는 클래스를 작성하면서
  Object Oriented Programming의 개념을 엿본다.
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

// [문제] main의 코드가 문제없이 실행되도록 class를 정의하고
// 모든 관찰메시지를 출력하라. (10분)

class Dragon {
public:
	Dragon(){
		cout << "디폴트 생성자" << endl;
	}

	~Dragon() {
		cout << "소멸자" << endl;
	}

	Dragon( const Dragon& other) {
		cout << "복사생성자" << endl;
	}

	Dragon& operator=(const Dragon& other) {
		cout << "할당연산자" << endl;
		return *this;
	}
};

//---------
int main()   
//---------
{
	Dragon a;
	Dragon b{ a };
	a = b;

	save("소스.cpp"); 
}







--------------------------------------
소스.cpp저장시간 - 2021-10-17 오후 6:01:28 일요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        7주 1일 - 1교시
  
  멤버변수가 private 이어야 하는 이유를 살펴 볼 수 있는 클래스를 작성하면서
  Object Oriented Programming의 개념을 엿본다.
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

// [문제] main의 코드가 문제없이 실행되도록 class를 정의하고
// 모든 관찰메시지를 출력하라. (10분)

// [문제] 생성 시 양의 정수 num을 인자로 받아
// num개의 정수를 저장하는 메모리를 확보하고 그 값을 1부터 채워나가는 
// class Mem을 정의하라.
// Mem의 멤버함수 show()를 호출하면 메모리에 기록된 값을 화면에 출력한다.
// main() 코드가 문제없이 실행되고 의도대로 값을 출력하도록 하라.

// 문제해결 방법을 생각하는 시간 10분
// 코딩하는 시간 10분

class Mem {
private:
	int* p;
	int num;

public:
	Mem(int n) : num{ n } {
		p = new int[num];
		for (int i = 0; i < n; ++i)
			p[i] = i + 1;
	}
	 
	~Mem() {

	}

	void show() {
		for (int i = 0; i < num; ++i)
			cout << p[i] << " ";
		cout << endl;
	}
};

//---------
int main()   
//---------
{
	Mem a{ 10 };
	
	a.show();		// 1 2 3 4 5 6 7 8 9 10

	save("소스.cpp"); 
}



--------------------------------------
소스.cpp저장시간 - 2021-10-17 오후 9:44:22 일요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        7주 1일 - 2교시
  
  자원을 할당하는 class를 코딩해 보며 OOP를 본격 공부해 본다.

  - 할당한 자원은 소멸자에서 반환한다.
  - 복사생성자에서 깊은 복사(deep copy)가 되도록 기능을 코딩한다.
    그렇게 하지 않으면 dangling pointer를 해제하는 순간 시스템은 정지한다.
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

// [문제] 객체의 동작을 화면 출력하여 관찰하라. (10분)
// 지금 문제있는 이 코드를 제대로 동작하도록 코딩하라.
// (main()의 내용이 변경되면 안된다)

class Mem {
private:
	int* p;
	int num;

public:
	Mem(int n) : num{ n } {
		p = new int[num];
		for (int i = 0; i < n; ++i)
			p[i] = i + 1;

		cout << "ctor - Mem(int), 갯수:" << num << ", 주소:" << p << endl;
	}
	 
	~Mem() {
		cout << "dtor - Mem(int), 갯수:" << num << ", 주소:" << p << endl; 
		delete[] p;
	}


	// 복사생성자 copy constructor
	Mem(const Mem& other) : num{ other.num } {
		p = new int[num];
		
		// 깊은 복사
		memcpy(p, other.p, num * sizeof(int));

		/*for (int i = 0; i < num; ++i)
			p[i] = other.p[i];*/
		
		cout << "copy ctor - Mem(int), 갯수:" << num << ", 주소:" << p << endl;
	}

	void show() {
		for (int i = 0; i < num; ++i)
			cout << p[i] << " ";
		cout << endl;
	}
};

//---------
int main()   
//---------
{
	Mem a{ 10 };
	Mem b = a;

	a.show();			// 1 2 3 4 5 6 7 8 9 10
	b.show();

	save("소스.cpp"); 
}


--------------------------------------
소스.cpp저장시간 - 2021-10-18 오후 4:28:18 월요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        7주 2일 - 1교시
  
  자원을 할당하는 class를 코딩해 보며 OOP를 본격 공부해 본다.

  - 할당한 자원은 소멸자에서 반환한다.
  - 복사생성자에서 깊은 복사(deep copy)가 되도록 기능을 코딩한다.
    그렇게 하지 않으면 dangling pointer를 해제하는 순간 시스템은 정지한다.
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

// [문제] 객체의 동작을 화면에 출력하여 관찰하라. (10분)
// 지금 문제있는 이 코드가 제대로 동작하도록 코딩하라.
// (main()의 내용이 변경되면 안된다)

class Mem {
private:
	int* p;
	int num;

public:
	Mem() : num{ 0 }, p{ nullptr } {
		cout << "default ctor - Mem(), 갯수:" << num << ", 주소:" << p << endl;
	}

	Mem(int n) : num{ n } {
		p = new int[num];
		for (int i = 0; i < n; ++i)
			p[i] = i + 1;

		cout << "ctor - Mem(int), 갯수:" << num << ", 주소:" << p << endl;
	}
	 
	~Mem() {
		cout << "dtor - Mem(int), 갯수:" << num << ", 주소:" << p << endl; 
		delete[] p;
	}


	// 복사생성자 copy constructor
	Mem(const Mem& other) : num{ other.num } {
		p = new int[num];
		
		// 깊은 복사
		memcpy(p, other.p, num * sizeof(int));
		
		/*for (int i = 0; i < num; ++i)
			p[i] = other.p[i];*/
		
		cout << "copy ctor - Mem( const Mem& ), 갯수:" << num << ", 주소:" << p << endl;
	}

	// 복사할당연산자 copy operator = 
	Mem& operator=(const Mem& other) {
		// 할당한 자원을 되돌린다
		delete[] p;

		num = other.num;
		p = new int[num];

		memcpy(p, other.p, num * sizeof(int));

		cout << "operator=( const Mem& ), 갯수:" << num << ", 주소:" << p << endl;

		return *this;
	}

	void show() {
		for (int i = 0; i < num; ++i)
			cout << p[i] << " ";
		cout << endl;
	}
};

//---------
int main()   
//---------
{
	Mem a{ 10 };
	Mem b = a;

	Mem c;
	c = a;		// 컴파일러는 복사할당연사자를 호출하기로 약속

	c.show();		// 1 2 3 4 5 6 7 8 9

	save("소스.cpp"); 
}


--------------------------------------
소스.cpp저장시간 - 2021-10-18 오후 4:29:03 월요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        7주 2일 - 1교시
  
  자원을 할당하는 class를 코딩해 보며 OOP를 본격 공부해 본다.

  - 할당한 자원은 소멸자에서 반환한다.
  - 복사생성자에서 깊은 복사(deep copy)가 되도록 기능을 코딩한다.
    그렇게 하지 않으면 dangling pointer를 해제하는 순간 시스템은 정지한다.
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include "save.h"
using namespace std;

// [문제] 객체의 동작을 화면에 출력하여 관찰하라. (10분)
// 지금 문제있는 이 코드가 제대로 동작하도록 코딩하라.
// (main()의 내용이 변경되면 안된다)

class Mem {
private:
	int* p;
	int num;

public:
	Mem() : num{ 0 }, p{ nullptr } {
		cout << "default ctor - Mem(), 갯수:" << num << ", 주소:" << p << endl;
	}

	Mem(int n) : num{ n } {
		p = new int[num];
		for (int i = 0; i < n; ++i)
			p[i] = i + 1;

		cout << "ctor - Mem(int), 갯수:" << num << ", 주소:" << p << endl;
	}
	 
	~Mem() {
		cout << "dtor - Mem(int), 갯수:" << num << ", 주소:" << p << endl; 
		delete[] p;
	}


	// 복사생성자 copy constructor
	Mem(const Mem& other) : num{ other.num } {
		p = new int[num];
		
		// 깊은 복사
		memcpy(p, other.p, num * sizeof(int));
		
		/*for (int i = 0; i < num; ++i)
			p[i] = other.p[i];*/
		
		cout << "copy ctor - Mem( const Mem& ), 갯수:" << num << ", 주소:" << p << endl;
	}

	// 복사할당연산자 copy operator = 
	Mem& operator=(const Mem& other) {
		// 할당한 자원을 되돌린다
		delete[] p;

		num = other.num;
		p = new int[num];

		memcpy(p, other.p, num * sizeof(int));

		cout << "operator=( const Mem& ), 갯수:" << num << ", 주소:" << p << endl;

		return *this;
	}

	void show() {
		for (int i = 0; i < num; ++i)
			cout << p[i] << " ";
		cout << endl;
	}
};

//---------
int main()   
//---------
{
	Mem a{ 3000 };

	Mem c{ 12345 };

	c = a;	// 컴파일러는 복사할당연사자를 호출하기로 약속

	save("소스.cpp"); 
}





--------------------------------------
소스.cpp저장시간 - 2021-10-20 오후 11:07:27 수요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        7주 2일 - 2교시
  
  사용자가 새로운 자료형 You를 만든다.

  string과 같은 기능을 갖는 String을 만들며 class 설계에 필요한 것들을 학습
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <string>
#include "save.h"
using namespace std;

// [문제] 다음 main()이 문제없이 실행되도록 class String을 코딩하라.
// main() 이 수정되면 안된다.

class String {
	int num{};	// 저장한 글자 수
	char* p{};	// 글자가 있는 메모리

public:
	String(const char* str) { 
		// 1. 글자 수를 센다
		num = strlen(str);
		// 2. 센 수 만큼 글자를 저장할 공간을 요청한다.
		p = new char[num];
		// 3. 그 공간에 p가 가리키는 글자를 저장한다.
		memcpy(p, str, num);

		cout << "생성자(const char*) - 갯수:" << num << ", 주소:" << (void*)p << endl;
	}
	
	void show() {
		for (int i = 0; i < num; ++i)
			cout << p[i];
		cout << endl;
	}
};

//---------
int main()   
//---------
{
	String s1{ "안녕하세요" };
	s1.show();


	save("소스.cpp");  
}


--------------------------------------
소스.cpp저장시간 - 2021-10-20 오후 11:32:19 수요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        7주 2일 - 2교시
  
  사용자가 새로운 자료형 You를 만든다.

  string과 같은 기능을 갖는 String을 만들며 class 설계에 필요한 것들을 학습
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <string>
#include "save.h"
using namespace std;

// [문제] 다음 main()이 문제없이 실행되도록 class String을 코딩하라.
// main() 이 수정되면 안된다.

class String {
	int num{};	// 저장한 글자 수
	char* p{};	// 글자가 있는 메모리

public:
	String(const char* str) { 
		// 1. 글자 수를 센다
		num = strlen(str);
		// 2. 센 수 만큼 글자를 저장할 공간을 요청한다.
		p = new char[num];
		// 3. 그 공간에 p가 가리키는 글자를 저장한다.
		memcpy(p, str, num);

		cout << "생성자(const char*) - 갯수:" << num << ", 주소:" << (void*)p << endl;
	}
	
	~String() {
		cout << "소멸자 -" << num << ", 주소:" << (void*)p << endl;
		delete[] p;
	}

	void show() {
		for (int i = 0; i < num; ++i)
			cout << p[i];
		cout << endl;
	}
};

//---------
int main()   
//---------
{
	String s1{ "안녕하세요" };
	s1.show();

	save("소스.cpp");  
}


--------------------------------------
소스.cpp저장시간 - 2021-10-20 오후 11:36:11 수요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        7주 2일 - 2교시
  
  사용자가 새로운 자료형 You를 만든다.

  string과 같은 기능을 갖는 String을 만들며 class 설계에 필요한 것들을 학습
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <string>
#include "save.h"
using namespace std;

// [문제] 다음 main()이 문제없이 실행되도록 class String을 코딩하라.
// main() 이 수정되면 안된다.

class String {
	size_t num{};	// 저장한 글자 수
	char* p{};	// 글자가 있는 메모리

public:
	String (const char* str) : num{ strlen(str) } {
		// 1. 글자 수를 센다
		num = strlen(str);
		// 2. 센 수 만큼 글자를 저장할 공간을 요청한다.
		p = new char[num];
		// 3. 그 공간에 p가 가리키는 글자를 저장한다.
		memcpy(p, str, num);

		cout << "생성자(const char*) - 갯수:" << num << ", 주소:" << (void*)p << endl;
	}
	
	~String() {
		cout << "소멸자 -" << num << ", 주소:" << (void*)p << endl;
		delete[] p;
	}

	void show() {
		for (int i = 0; i < num; ++i)
			cout << p[i];
		cout << endl;
	}
};

//---------
int main()   
//---------
{
	String s1{ "12345678901234567890123" };
	s1.show();

	save("소스.cpp");  
}




--------------------------------------
소스.cpp저장시간 - 2021-10-20 오후 11:42:53 수요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        7주 2일 - 2교시
  
  사용자가 새로운 자료형 You를 만든다.

  string과 같은 기능을 갖는 String을 만들며 class 설계에 필요한 것들을 학습
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <string>
#include "save.h"
using namespace std;

// [문제] 다음 main()이 문제없이 실행되도록 class String을 코딩하라.
// main() 이 수정되면 안된다.

class String {
	size_t num{};	// 저장한 글자 수
	char* p{};	// 글자가 있는 메모리

public:
	String (const char* str) : num{ strlen(str) } {
		// 1. 글자 수를 센다
		num = strlen(str);
		// 2. 센 수 만큼 글자를 저장할 공간을 요청한다.
		p = new char[num];
		// 3. 그 공간에 p가 가리키는 글자를 저장한다.
		memcpy(p, str, num);

		cout << "나 자신의 주소   " << this << endl;
		cout << "멤버 num 의 주소 " << &num << endl;
		cout << "멤버 p의 주소    " << (void*)&p << endl;
		cout << "생성자(const char*) - 갯수:" << num << ", 주소:" << (void*)p << endl;
	}
	
	~String() {
		cout << "소멸자 -" << num << ", 주소:" << (void*)p << endl;
		delete[] p;
	}

	void show() {
		for (int i = 0; i < num; ++i)
			cout << p[i];
		cout << endl;
	}
};

//---------
int main()   
//---------
{
	String s1{ "12345678901234567890123" };
	String s2{ "C++ 정말 좋은 프로그래밍 언어이다." };

	s1.show();
	s2.show();

	save("소스.cpp");  
}




--------------------------------------
소스.cpp저장시간 - 2021-10-20 오후 11:50:35 수요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++														        7주 2일 - 2교시
  
  사용자가 새로운 자료형 You를 만든다.

  string과 같은 기능을 갖는 String을 만들며 class 설계에 필요한 것들을 학습
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <string>
#include "save.h"
using namespace std;

// [문제] 다음 main()이 문제없이 실행되도록 class String을 코딩하라.
// main() 이 수정되면 안된다.

class String {
	size_t num{};	// 저장한 글자 수
	char* p{};	// 글자가 있는 메모리

public:
	String (const char* str) : num{ strlen(str) } {
		// 1. 글자 수를 센다
		num = strlen(str);
		// 2. 센 수 만큼 글자를 저장할 공간을 요청한다.
		p = new char[num];
		// 3. 그 공간에 p가 가리키는 글자를 저장한다.
		memcpy(p, str, num);

		cout << "생성자(const char*) - 갯수:" << num << ", 주소:" << (void*)p << endl;
	}
	
	~String() {
		cout << "소멸자 -" << num << ", 주소:" << (void*)p << endl;
		delete[] p;
	}

	String& operator=(const String& other) {
		if (this == &other) {
			return *this;
		}

		delete[] p;
		num = other.num;
		p = new char[num];

		memcpy(p, other.p, num);

		return *this;
	}

	void show() {
		for (int i = 0; i < num; ++i)
			cout << p[i];
		cout << endl;
	}
};

//---------
int main()   
//---------
{
	String s1{ "안녕하세요" };
	String s2{ "C++ 정말 좋은 프로그래밍 언어이다." };

	s2 = s1;

	s1.show();
	s2.show();

	save("소스.cpp");  
}


--------------------------------------
소스.cpp저장시간 - 2021-11-10 오후 12:18:36 수요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++				수34목23												   11주 1일 
  
  1. 지금까지 강의한 내용 정리
  2. class Dog - 파일에 입출력
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <fstream>
#include <string>
#include "save.h"
using namespace std;

class Dog {
	string name{};
	int age{};

public:
	Dog() {}
	Dog( string s ) : name{ s } {}
	Dog(string s, int n) : name{ s }, age{ n } {}

	friend ostream& operator<<(ostream&, const Dog&);
};

ostream& operator<<(ostream& os, const Dog& dog)
{
	os << dog.name << ", " << dog.age << "살 달린다";
	return os;
}

// [문제] 프로그램이 문제없이 실행되게 하자.
// Dog a와 b를 파일 "개들.txt"에 저장하라.

//---------
int main()   
//---------
{
	Dog a{ "코코"};
	Dog b{ "보리", 3 };

	ofstream out{"개들.txt"};

	out << a << endl;
	out << b << endl;


	save("소스.cpp");  
}


--------------------------------------
소스.cpp저장시간 - 2021-11-10 오후 12:50:53 수요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++				수34목23												   11주 1일 
  
  1. 지금까지 강의한 내용 정리
  2. class Dog - 파일에 입출력
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <fstream>
#include <string>
#include "save.h"
using namespace std;

class Dog {
	string name{};
	int age{};

public:
	Dog() {}
	Dog( string s ) : name{ s } {}
	Dog(string s, int n) : name{ s }, age{ n } {}


	// 출력연산자
	friend ostream& operator<<(ostream&, const Dog&);

	// 입력연산자
	friend istream& operator>>(istream&, Dog&);

};

ostream& operator<<(ostream& os, const Dog& dog)
{
	os << dog.name << "  " << dog.age << "  ";
	return os;
}

istream& operator>>(istream& is, Dog& dog)
{
	is >> dog.name >> dog.age;
	return is;
}

// [문제] 프로그램이 문제없이 실행되게 하자.
// Dog a와 b를 파일 "개들.txt"에 저장하라.
// Dog 2마리 정보가 파일 "개들.txt"에 저장되어있다.
// 파일에서 정보를 읽고 화면에 출력하라.


//---------
int main()   
//---------
{
	ifstream in{ "개들.txt" };
	
	Dog a;
	Dog b;

	in >> a >> b;

	cout << a << endl;
	cout << b << endl;

	save("소스.cpp");  
}


--------------------------------------
소스.cpp저장시간 - 2021-11-10 오후 12:57:28 수요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++				수34목23												   11주 1일 
  
  1. 지금까지 강의한 내용 정리
  2. class Dog - 파일에 입출력
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <fstream>
#include <string>
#include "save.h"
using namespace std;

class Dog {
	string name{};
	int age{};

public:
	Dog() {}
	Dog( string s ) : name{ s } {}
	Dog(string s, int n) : name{ s }, age{ n } {}


	// 출력연산자
	friend ostream& operator<<(ostream&, const Dog&);

	// 입력연산자
	friend istream& operator>>(istream&, Dog&);

};

ostream& operator<<(ostream& os, const Dog& dog)
{
	os << dog.name << "  " << dog.age << "  ";
	return os;
}

istream& operator>>(istream& is, Dog& dog)
{
	is >> dog.name >> dog.age;
	return is;
}

// [문제] Dog 1'0000 객체를 랜덤하게 생성하여 파일 "개만마리.txt"에 기록하라
// 이름은 영소문자 길이는 10글자 고정한다.
// 나이 [1, 1000]


//---------
int main()   
//---------
{
	Dog a;
	Dog b;

	cin >> a >> b;

	cout << a << endl;
	cout << b << endl;

	save("소스.cpp");  
}


--------------------------------------
소스.cpp저장시간 - 2021-11-10 오후 1:04:31 수요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++				수34목23												   11주 1일 
  
  1. 지금까지 강의한 내용 정리
  2. class Dog - 파일에 입출력
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <fstream>
#include <string>
#include <random>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution<>uid{ 1, 1000 };
uniform_int_distribution<>uidAlpha{ 'a', 'z' };

class Dog {
	string name{};
	int age{};

public:
	Dog() {}
	Dog( string s ) : name{ s } {}
	Dog(string s, int n) : name{ s }, age{ n } {}

	void setName() {
		for (int i = 0; i < 10; ++i) {
			name += uidAlpha(dre);
		}
	}

	void setAge() {
		age = uid(dre);
	}

	// 출력연산자
	friend ostream& operator<<(ostream&, const Dog&);

	// 입력연산자
	friend istream& operator>>(istream&, Dog&);

};

ostream& operator<<(ostream& os, const Dog& dog)
{
	os << dog.name << "  " << dog.age << "  ";
	return os;
}

istream& operator>>(istream& is, Dog& dog)
{
	is >> dog.name >> dog.age;
	return is;
}

// [문제] Dog 1'0000 객체를 랜덤하게 생성하여 파일 "개만마리.txt"에 기록하라
// 이름은 영소문자 길이는 10글자 고정한다.
// 나이 [1, 1000]


//---------
int main()   
//---------
{
	ofstream out{ "개만마리.txt" };

	for (int i = 0; i < 1'0000; ++i) {
		Dog a;			// Dog 한마리 생성
		a.setName();
		a.setAge();
		out << a << endl;
	}

	save("소스.cpp");  
}


--------------------------------------
소스.cpp저장시간 - 2021-11-11 오후 1:38:14 목요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++				수34목23												   11주 1일 
  
  1. 지금까지 강의한 내용 정리
  2. class Dog - 파일에 입출력
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <fstream>
#include <string>
#include <random>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution<>uid{ 1, 1000 };
uniform_int_distribution<>uidAlpha{ 'a', 'z' };

class Dog {
	string name{};
	int age{};

public:
	Dog() {}
	Dog( string s ) : name{ s } {}
	Dog(string s, int n) : name{ s }, age{ n } {}

	void setName() {
		for (int i = 0; i < 10; ++i) {
			name += uidAlpha(dre);
		}
	}

	void setAge() {
		age = uid(dre);
	}

	void ascending_Age() {

	}

	// 출력연산자
	friend ostream& operator<<(ostream&, const Dog&);

	// 입력연산자
	friend istream& operator>>(istream&, Dog&);

};

ostream& operator<<(ostream& os, const Dog& dog)
{
	os << dog.name << "  " << dog.age << "  ";
	return os;
}

istream& operator>>(istream& is, Dog& dog)
{
	is >> dog.name >> dog.age;
	return is;
}

// [문제] Dog 1'0000 마리 정보가 "개만마리txt"에  저장되어있다.
// [1] 자료를 읽어 화면에 출력하라.
// [2] 이름오름차순으로 정렬하라. - 출력
// [3] 나이오름차순으로 정렬하라. - 출력


//---------
int main()   
//---------
{
	// [1] 자료를 읽어 화면에 출력하라.
	ifstream in{ "개만마리.txt" };
	
	for (int i = 0; i < 10000; ++i) {
		Dog dog;
		in >> dog;
		cout << dog << endl;
	}

	save("소스.cpp");  
}


--------------------------------------
소스.cpp저장시간 - 2021-11-11 오후 1:48:30 목요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++				수34목23												   11주 1일 
  
  1. 지금까지 강의한 내용 정리
  2. class Dog - 파일에 입출력
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <fstream>
#include <string>
#include <random>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution<>uid{ 1, 1000 };
uniform_int_distribution<>uidAlpha{ 'a', 'z' };

class Dog {
	string name{};
	int age{};

public:
	Dog() {}
	Dog( string s ) : name{ s } {}
	Dog(string s, int n) : name{ s }, age{ n } {}

	void setName() {
		for (int i = 0; i < 10; ++i) {
			name += uidAlpha(dre);
		}
	}

	void setAge() {
		age = uid(dre);
	}

	void ascending_Age() {

	}

	// 출력연산자
	friend ostream& operator<<(ostream&, const Dog&);

	// 입력연산자
	friend istream& operator>>(istream&, Dog&);

};

ostream& operator<<(ostream& os, const Dog& dog)
{
	os << dog.name << "  " << dog.age << "  ";
	return os;
}

istream& operator>>(istream& is, Dog& dog)
{
	is >> dog.name >> dog.age;
	return is;
}

// [문제] Dog 1'0000 마리 정보가 "개만마리txt"에  저장되어있다.
// [1] 자료를 읽어 화면에 출력하라.
// [2] 이름오름차순으로 정렬하라. - 출력
// [3] 나이오름차순으로 정렬하라. - 출력

Dog dogs[1'0000];

//---------
int main()   
//---------
{
	// [2] 이름오름차순으로 정렬하라. - 출력
	// - 모든 자료를 읽어 메모리에 저장하고 있어야 한다.

	ifstream in{ "개만마리.txt" };

	for ( Dog dog : dogs )
		in >> dog;

	cout << dogs[9999] << endl;

	save("소스.cpp");  
}


--------------------------------------
소스.cpp저장시간 - 2021-11-11 오후 1:50:42 목요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++				수34목23												   11주 1일 
  
  1. 지금까지 강의한 내용 정리
  2. class Dog - 파일에 입출력
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <fstream>
#include <string>
#include <random>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution<>uid{ 1, 1000 };
uniform_int_distribution<>uidAlpha{ 'a', 'z' };

class Dog {
	string name{};
	int age{};

public:
	Dog() {}
	Dog( string s ) : name{ s } {}
	Dog(string s, int n) : name{ s }, age{ n } {}

	void setName() {
		for (int i = 0; i < 10; ++i) {
			name += uidAlpha(dre);
		}
	}

	void setAge() {
		age = uid(dre);
	}

	void ascending_Age() {

	}

	// 출력연산자
	friend ostream& operator<<(ostream&, const Dog&);

	// 입력연산자
	friend istream& operator>>(istream&, Dog&);

};

ostream& operator<<(ostream& os, const Dog& dog)
{
	os << dog.name << "  " << dog.age << "  ";
	return os;
}

istream& operator>>(istream& is, Dog& dog)
{
	is >> dog.name >> dog.age;
	return is;
}

// [문제] Dog 1'0000 마리 정보가 "개만마리txt"에  저장되어있다.
// [1] 자료를 읽어 화면에 출력하라.
// [2] 이름오름차순으로 정렬하라. - 출력
// [3] 나이오름차순으로 정렬하라. - 출력

Dog dogs[1'0000];

//---------
int main()   
//---------
{
	ifstream in{ "개만마리.txt" };

	Dog* p = new Dog[1'0000];

	for (int i = 0; i < 10000; ++i)
		in >> *(p + i);

	cout << p[9999] << endl;

	save("소스.cpp");  
}


--------------------------------------
소스.cpp저장시간 - 2021-11-11 오후 2:06:07 목요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++				수34목23												   11주 1일 
  
  1. 지금까지 강의한 내용 정리
  2. class Dog - 파일에 입출력
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <fstream>
#include <string>
#include <random>
#include <algorithm>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution<>uid{ 1, 1000 };
uniform_int_distribution<>uidAlpha{ 'a', 'z' };

class Dog {
	string name{};
	int age{};

public:
	Dog() {}
	Dog( string s ) : name{ s } {}
	Dog(string s, int n) : name{ s }, age{ n } {}

	void setName() {
		for (int i = 0; i < 10; ++i) {
			name += uidAlpha(dre);
		}
	}

	void setAge() {
		age = uid(dre);
	}

	void ascending_Age() {

	}

	string getName() const {
		return name;
	}

	int getAge() const {
		return age;
	}

	// 출력연산자
	friend ostream& operator<<(ostream&, const Dog&);

	// 입력연산자
	friend istream& operator>>(istream&, Dog&);

};

ostream& operator<<(ostream& os, const Dog& dog)
{
	os << dog.name << "  " << dog.age << "  ";
	return os;
}

istream& operator>>(istream& is, Dog& dog)
{
	is >> dog.name >> dog.age;
	return is;
}

// [문제] Dog 1'0000 마리 정보가 "개만마리txt"에  저장되어있다.
// [1] 자료를 읽어 화면에 출력하라.
// [2] 이름오름차순으로 정렬하라. - 출력
// [3] 나이오름차순으로 정렬하라. - 출력


//---------
int main()   
//---------
{
	ifstream in{ "개만마리.txt" };

	Dog* p = new Dog[1'0000];

	for (int i = 0; i < 10000; ++i)
		in >> p[i];

	// 이제 정렬 준비가 되었다.
	sort(p, p + 10000, [](const Dog& a, const Dog& b) {
		return a.getName() < b.getName();
		});
	
	for (int i = 0; i < 10000; ++i)
		cout << p[i] << endl;

	save("소스.cpp");  
}


--------------------------------------
소스.cpp저장시간 - 2021-11-11 오후 2:50:03 목요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++				               						  수34목23		   11주 1일 
  
  class 간의 관계
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <string>
#include "save.h"
using namespace std;

// [문제] 모든 문자를 대문자로 처리하는 STRING 클래스를
// 만들어라. main

class STRING : public string {
public:
	STRING(string s) : string{ s } {
		for (int i = 0; i < s.size(); ++i)
			(*this)[i] = toupper((*this)[i]);
	}
};

//---------
int main()   
//---------
{
	STRING s{ "C++ programming language" };

	s += "!";

	cout << s << endl;		// C++ PROGRAMMING LANGUAGE

	save("소스.cpp");  
}


--------------------------------------
소스.cpp저장시간 - 2021-11-11 오후 3:03:56 목요일
--------------------------------------

/*----------------------------------------------------------------------------------------
  2021 2학기 C++				               						  수34목23		   11주 1일 
  
  class 간의 관계 - 상속(inheritance)
  ----------------------------------------------------------------------------------------*/

#include <iostream>
#include <string>
#include "save.h"
using namespace std;

// [문제] 모든 문자를 대문자로 처리하는 STRING 클래스를
// 만들어라. main

class STRING : public string {
public:
	STRING(string s) : string{ s } {
		for (int i = 0; i < s.size(); ++i)
			(*this)[i] = toupper((*this)[i]);
	}
};

//---------
int main()   
//---------
{
	STRING s{ "C++ programming language" };

	s += "!";

	cout << s << endl;		// C++ PROGRAMMING LANGUAGE

	save("소스.cpp");  
}
